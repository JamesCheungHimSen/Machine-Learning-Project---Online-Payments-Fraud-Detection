{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"05.1 (CLEAN) <0.2> ALL Encompassing .ipynb ","provenance":[],"collapsed_sections":[],"mount_file_id":"18f6X4rAwhcNn3vsFQ5HdigVtY20sQXjw","authorship_tag":"ABX9TyOEmz4661REbpVfu95nOBUx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"2OkT8hlbJDXr","executionInfo":{"status":"ok","timestamp":1653746254938,"user_tz":-480,"elapsed":12,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"outputs":[],"source":["# https://www.kaggle.com/datasets/rupakroy/online-payments-fraud-detection-dataset"]},{"cell_type":"code","source":["############################################# 1. ################################################### \n","# (Import Data / EDA)"],"metadata":{"id":"G6T6IORrjHzQ","executionInfo":{"status":"ok","timestamp":1653746254939,"user_tz":-480,"elapsed":11,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import xgboost\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score"],"metadata":{"id":"RIAeJAqZi3ta","executionInfo":{"status":"ok","timestamp":1653746255951,"user_tz":-480,"elapsed":1021,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Mounting the google colab drive\n","from google.colab import drive\n","drive.mount('/content/drive/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_qwCVGb0JKye","executionInfo":{"status":"ok","timestamp":1653746275829,"user_tz":-480,"elapsed":19886,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"240ac12f-eb90-4563-a80c-77e8f40c78c5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}]},{"cell_type":"code","source":["import chardet\n","with open(\"/content/drive/MyDrive/Xccelerate/ML Project/Online Payments Fraud Detection Dataset.csv\",'rb') as rawdata:\n","  result=chardet.detect(rawdata.read(100000))\n","result"],"metadata":{"id":"DxonqEtdjEuv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746277029,"user_tz":-480,"elapsed":1207,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"bbebea2a-6aa3-4124-912c-f987d5a8e77f"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'confidence': 1.0, 'encoding': 'ascii', 'language': ''}"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/Xccelerate/ML Project/Online Payments Fraud Detection Dataset.csv\", encoding='ISO-8859-1')"],"metadata":{"id":"_-4ai-E9jSUN","executionInfo":{"status":"ok","timestamp":1653746295756,"user_tz":-480,"elapsed":18731,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df.head(5)"],"metadata":{"id":"i5wXRlZxjSXG","colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"status":"ok","timestamp":1653746295757,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9854bb9c-5a5c-45c6-f3e2-7b8e92adfc47"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n","0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n","1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n","2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n","3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n","4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n","\n","      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n","0  M1979787155             0.0             0.0        0               0  \n","1  M2044282225             0.0             0.0        0               0  \n","2   C553264065             0.0             0.0        1               0  \n","3    C38997010         21182.0             0.0        1               0  \n","4  M1230701703             0.0             0.0        0               0  "],"text/html":["\n","  <div id=\"df-902b088f-1728-45dd-9f46-a54fa1d47af0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>type</th>\n","      <th>amount</th>\n","      <th>nameOrig</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>nameDest</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>9839.64</td>\n","      <td>C1231006815</td>\n","      <td>170136.0</td>\n","      <td>160296.36</td>\n","      <td>M1979787155</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>1864.28</td>\n","      <td>C1666544295</td>\n","      <td>21249.0</td>\n","      <td>19384.72</td>\n","      <td>M2044282225</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>TRANSFER</td>\n","      <td>181.00</td>\n","      <td>C1305486145</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C553264065</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>CASH_OUT</td>\n","      <td>181.00</td>\n","      <td>C840083671</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C38997010</td>\n","      <td>21182.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>11668.14</td>\n","      <td>C2048537720</td>\n","      <td>41554.0</td>\n","      <td>29885.86</td>\n","      <td>M1230701703</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-902b088f-1728-45dd-9f46-a54fa1d47af0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-902b088f-1728-45dd-9f46-a54fa1d47af0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-902b088f-1728-45dd-9f46-a54fa1d47af0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["df.drop(['nameOrig','nameDest','type'],axis='columns',inplace=True)"],"metadata":{"id":"UtNUE5A-jSaI","executionInfo":{"status":"ok","timestamp":1653746295758,"user_tz":-480,"elapsed":23,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","DATA SET SAMPLE SIZE: 3000000 / 10000\n","\"\"\"\n","df=df.iloc[:2000,:] "],"metadata":{"id":"Yrt8X9M0jSc_","executionInfo":{"status":"ok","timestamp":1653746295760,"user_tz":-480,"elapsed":24,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["df.shape"],"metadata":{"id":"nV8si2xPjSfd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746296053,"user_tz":-480,"elapsed":316,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e30e2fbf-cd2c-49f3-cb77-bae567141516"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2000, 8)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["df.isFraud.value_counts()/len(df)*100"],"metadata":{"id":"KF3mdL6SjShy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746296054,"user_tz":-480,"elapsed":17,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5da3b127-263f-41b2-d52a-b7781c45b926"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    99.3\n","1     0.7\n","Name: isFraud, dtype: float64"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# The data is highly imbalanced."],"metadata":{"id":"7gy1x0rPjSkX","executionInfo":{"status":"ok","timestamp":1653746296055,"user_tz":-480,"elapsed":11,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["## Correlation\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","#get correlations of each features in dataset\n","corrmat = df.corr()\n","top_corr_features = corrmat.index\n","plt.figure(figsize=(10,10))\n","#plot heat map\n","g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap=\"Greens\")"],"metadata":{"id":"jcfl9SpojSm4","colab":{"base_uri":"https://localhost:8080/","height":669},"executionInfo":{"status":"ok","timestamp":1653746297229,"user_tz":-480,"elapsed":1184,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"50bd9b38-31f8-4e0f-9f6f-211d12789455"},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"S1MZmqNDzJWq","executionInfo":{"status":"ok","timestamp":1653746297231,"user_tz":-480,"elapsed":15,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0c825149-73e7-4eb3-9bdb-7950d66e2d37"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","0     1   9839.64       170136.0       160296.36             0.0   \n","1     1   1864.28        21249.0        19384.72             0.0   \n","2     1    181.00          181.0            0.00             0.0   \n","3     1    181.00          181.0            0.00         21182.0   \n","4     1  11668.14        41554.0        29885.86             0.0   \n","\n","   newbalanceDest  isFraud  isFlaggedFraud  \n","0             0.0        0               0  \n","1             0.0        0               0  \n","2             0.0        1               0  \n","3             0.0        1               0  \n","4             0.0        0               0  "],"text/html":["\n","  <div id=\"df-73abae1b-9661-4b23-a526-95ed97d903a0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>9839.64</td>\n","      <td>170136.0</td>\n","      <td>160296.36</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1864.28</td>\n","      <td>21249.0</td>\n","      <td>19384.72</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>21182.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>11668.14</td>\n","      <td>41554.0</td>\n","      <td>29885.86</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-73abae1b-9661-4b23-a526-95ed97d903a0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-73abae1b-9661-4b23-a526-95ed97d903a0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-73abae1b-9661-4b23-a526-95ed97d903a0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#Get the Independent and Dependent Features\n","X=df.iloc[:,0:6]\n","Y=df.iloc[:,6]"],"metadata":{"id":"LstfLvNZjSpo","executionInfo":{"status":"ok","timestamp":1653746297234,"user_tz":-480,"elapsed":14,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["Y"],"metadata":{"id":"l8B1StYbjSsI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297984,"user_tz":-480,"elapsed":98,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"67ea26f7-30e5-4694-dd39-08d70534d667"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       0\n","1       0\n","2       1\n","3       1\n","4       0\n","       ..\n","1995    0\n","1996    0\n","1997    0\n","1998    0\n","1999    0\n","Name: isFraud, Length: 2000, dtype: int64"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["############################################# 2. ###################################################\n","# (Train Test Split / Feature Scaling)"],"metadata":{"id":"oHTMgwYGjS5Z","executionInfo":{"status":"ok","timestamp":1653746297985,"user_tz":-480,"elapsed":89,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["#Train Test Split\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)"],"metadata":{"id":"O1ExAQ1WjS8u","executionInfo":{"status":"ok","timestamp":1653746297985,"user_tz":-480,"elapsed":88,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["len(X_train)"],"metadata":{"id":"QIxw9LHejS-u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297986,"user_tz":-480,"elapsed":88,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7341c74d-5248-46b3-df7a-cc5d1ccadc46"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1600"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["len(X_test)"],"metadata":{"id":"-6hEGlPvjTBg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297986,"user_tz":-480,"elapsed":78,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3ed0afbe-6452-4cc0-b004-e0690f3d18fc"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["400"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["#Feature Scaling\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X_train = sc.fit_transform(X_train)\n","X_test = sc.transform(X_test)"],"metadata":{"id":"4uogeeqGjTEe","executionInfo":{"status":"ok","timestamp":1653746297987,"user_tz":-480,"elapsed":71,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["############################################# 3.1 ###################################################\n","# (Knn)"],"metadata":{"id":"EphNLGZcjTHd","executionInfo":{"status":"ok","timestamp":1653746297987,"user_tz":-480,"elapsed":70,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["#Call the kNN Classifier\n","from sklearn.neighbors import KNeighborsClassifier\n","#Initiating the classifier\n","classifier_kn = KNeighborsClassifier()\n","#Passing the data to the classifier\n","classifier_kn.fit(X_train, y_train)"],"metadata":{"id":"zTPyrqsPjTKJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297988,"user_tz":-480,"elapsed":70,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3b2fb3ad-5bbe-4a59-9aa2-220fc8cb9059"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_kn = classifier_kn.predict(X_test)"],"metadata":{"id":"J4pdj0bojTM3","executionInfo":{"status":"ok","timestamp":1653746297988,"user_tz":-480,"elapsed":65,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_kn = confusion_matrix(y_test, y_pred_kn)\n","print('Confusion Matrix')\n","print(result)"],"metadata":{"id":"8EdeRP2TjTQS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297989,"user_tz":-480,"elapsed":66,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"885bae45-be6b-4ec3-f88d-4b896655aea4"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\n"]}]},{"cell_type":"code","source":["result1_kn = classification_report(y_test, y_pred_kn)\n","print('Classification Report')\n","print(result1_kn)"],"metadata":{"id":"Sav3-orAjTTC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297989,"user_tz":-480,"elapsed":60,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"25ee3f79-4b12-483f-9eba-0f8937933f04"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       399\n","           1       0.00      0.00      0.00         1\n","\n","    accuracy                           1.00       400\n","   macro avg       0.50      0.50      0.50       400\n","weighted avg       1.00      1.00      1.00       400\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["result2_kn = accuracy_score(y_test, y_pred_kn)\n","print('Accuracy: ', result2_kn)"],"metadata":{"id":"pvul1mUpjTWg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297989,"user_tz":-480,"elapsed":54,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"78f632d6-7b33-4887-8b66-ae6e0a195f66"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.9975\n"]}]},{"cell_type":"code","source":["############################################# 3.2 ###################################################\n","# (Decision Tree)"],"metadata":{"id":"-elv7iMsjTgV","executionInfo":{"status":"ok","timestamp":1653746297990,"user_tz":-480,"elapsed":50,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["#Call the Decision Tree Classifier\n","from sklearn.tree import DecisionTreeClassifier\n","#Initiating the classifier\n","classifier_dt = DecisionTreeClassifier()\n","#Passing the data to the classifier\n","classifier_dt.fit(X_train, y_train)"],"metadata":{"id":"bPXfv2dzsbkI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297990,"user_tz":-480,"elapsed":49,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"06f903dd-a408-42c5-a7a7-ef7e170efbf2"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_dt = classifier_dt.predict(X_test)"],"metadata":{"id":"Kr4tvOpIsbnI","executionInfo":{"status":"ok","timestamp":1653746297991,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_dt = confusion_matrix(y_test, y_pred_dt)\n","print('Confusion Matrix')\n","print(result_dt)"],"metadata":{"id":"91xpox0ssbp3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297991,"user_tz":-480,"elapsed":44,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"225847a7-b764-4da1-972f-7b457fc842bf"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[397   2]\n"," [  0   1]]\n"]}]},{"cell_type":"code","source":["result1_dt = classification_report(y_test, y_pred_dt)\n","print('Classification Report')\n","print(result1_dt)"],"metadata":{"id":"kF2sZHaJsbsx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297992,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"8ae2b20e-2b9f-4aa1-a6b2-9dffa5dad1a2"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      1.00       399\n","           1       0.33      1.00      0.50         1\n","\n","    accuracy                           0.99       400\n","   macro avg       0.67      1.00      0.75       400\n","weighted avg       1.00      0.99      1.00       400\n","\n"]}]},{"cell_type":"code","source":["result2_dt = accuracy_score(y_test, y_pred_dt)\n","print('Accuracy: ', result2_dt)"],"metadata":{"id":"z280jeJQsbvS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297992,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a6b41505-b8cb-4711-f713-1a456dc5ef91"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.995\n"]}]},{"cell_type":"code","source":["############################################# 3.3 ###################################################\n","# (Naive Bayes)"],"metadata":{"id":"eukjpAxkk8pi","executionInfo":{"status":"ok","timestamp":1653746297993,"user_tz":-480,"elapsed":29,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Naive Bayes\n","from sklearn.naive_bayes import GaussianNB\n","classifier_nb = GaussianNB()\n","classifier_nb.fit(X_train, y_train)"],"metadata":{"id":"1zvXiPs1spMA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746297993,"user_tz":-480,"elapsed":29,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b3cf24bf-1de8-44f4-8729-e84ffec04dea"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB()"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_nb = classifier_nb.predict(X_test)"],"metadata":{"id":"vpyloVbOspQM","executionInfo":{"status":"ok","timestamp":1653746298591,"user_tz":-480,"elapsed":617,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_nb = confusion_matrix(y_test, y_pred_nb)\n","print('Confusion Matrix')\n","print(result)"],"metadata":{"id":"wZL4R8wgspUM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298592,"user_tz":-480,"elapsed":65,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"db1c41f5-c485-46ad-ec00-ffb14524fcc3"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\n"]}]},{"cell_type":"code","source":["result1_nb = classification_report(y_test, y_pred_nb)\n","print('Classification Report')\n","print(result1_nb)"],"metadata":{"id":"Jh_qV93espYf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298592,"user_tz":-480,"elapsed":52,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9fbeeda4-c9f1-42a1-f1ad-639b8819ea6e"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.80      0.89       399\n","           1       0.01      1.00      0.02         1\n","\n","    accuracy                           0.80       400\n","   macro avg       0.51      0.90      0.46       400\n","weighted avg       1.00      0.80      0.89       400\n","\n"]}]},{"cell_type":"code","source":["result2_nb = accuracy_score(y_test, y_pred_nb)\n","print('Accuracy: ', result2_nb)"],"metadata":{"id":"U0ARzh-Wspc5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298593,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9a08ec25-db0d-49ab-a0e7-d2963ea95ca7"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.8025\n"]}]},{"cell_type":"code","source":["############################################# 3.4 ###################################################\n","# (XGBoost) "],"metadata":{"id":"xiEJnHHgk8tL","executionInfo":{"status":"ok","timestamp":1653746298593,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["classifier_xgb=xgboost.XGBClassifier()\n","classifier_xgb.fit(X_train,y_train)"],"metadata":{"id":"_D9o_coetLIi","executionInfo":{"status":"ok","timestamp":1653746298594,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"142b3bb0-f35c-407c-e48b-5a6ff8ac35b7"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier()"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["y_pred_xgb = classifier_xgb.predict(X_test)"],"metadata":{"id":"DAFfz4uZnp6r","executionInfo":{"status":"ok","timestamp":1653746298594,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["result_xgb = confusion_matrix(y_test, y_pred_xgb)\n","print('Confusion Matrix')\n","print(result_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FPkKz2bRoPna","executionInfo":{"status":"ok","timestamp":1653746298595,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2a3c1dfe-164b-4476-8d15-0e6ca9384c17"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[399   0]\n"," [  1   0]]\n"]}]},{"cell_type":"code","source":["result_xgb = classification_report(y_test, y_pred_xgb)\n","print('Classification Report')\n","print(result_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J3ZcI67lnsNk","executionInfo":{"status":"ok","timestamp":1653746298595,"user_tz":-480,"elapsed":25,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0d3d538a-d352-44f7-db4a-9aa7189a0bda"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       399\n","           1       0.00      0.00      0.00         1\n","\n","    accuracy                           1.00       400\n","   macro avg       0.50      0.50      0.50       400\n","weighted avg       1.00      1.00      1.00       400\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["print('Accuracy is ' ,round(accuracy_score(y_test, y_pred_xgb)*100,4), '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1utd9BawobCw","executionInfo":{"status":"ok","timestamp":1653746298596,"user_tz":-480,"elapsed":18,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"69d18bc7-e7af-4929-c878-8f0426fb3bdb"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy is  99.75 %\n"]}]},{"cell_type":"code","source":["############################################# 3.5 ###################################################\n","# (Random Forest / ROC AUC)"],"metadata":{"id":"PEn8nHWmlA8Y","executionInfo":{"status":"ok","timestamp":1653746298597,"user_tz":-480,"elapsed":12,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["# Fitting RFClassifier to the Training set\n","from sklearn.ensemble import RandomForestClassifier\n","classifier_rf = RandomForestClassifier(n_estimators=10)\n","classifier_rf.fit(X_train, y_train)"],"metadata":{"id":"1jRkwqvtpjkQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298935,"user_tz":-480,"elapsed":350,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7e1f4486-0404-4ad1-ad52-50bc486833eb"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=10)"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_rf = classifier_rf.predict(X_test)"],"metadata":{"id":"QxTHqKtGpjoy","executionInfo":{"status":"ok","timestamp":1653746298936,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_rf = confusion_matrix(y_test, y_pred_rf)\n","print('Confusion Matrix')\n","print(result_rf)"],"metadata":{"id":"tCVpg9yIpjtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298936,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"38c9fcc7-fb5e-4a8f-ffec-20fae55fff1e"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[399   0]\n"," [  1   0]]\n"]}]},{"cell_type":"code","source":["result1_rf = classification_report(y_test, y_pred_rf)\n","print('Classification Report')\n","print(result1_rf)"],"metadata":{"id":"CORURAB0pjxz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298937,"user_tz":-480,"elapsed":28,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3f0b7534-bfe8-4dfd-e1d0-f4939e85dbe8"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       399\n","           1       0.00      0.00      0.00         1\n","\n","    accuracy                           1.00       400\n","   macro avg       0.50      0.50      0.50       400\n","weighted avg       1.00      1.00      1.00       400\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["result2_rf = accuracy_score(y_test, y_pred_rf)\n","print('Accuracy: ', result2_rf)"],"metadata":{"id":"mxHxJjhEpj1U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746298937,"user_tz":-480,"elapsed":20,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"13bb5c84-50b3-4b1c-c6c0-b7afb61fc949"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.9975\n"]}]},{"cell_type":"code","source":["############################################# 4. ################################################### "],"metadata":{"id":"r5_qopVgt-To","executionInfo":{"status":"ok","timestamp":1653746298938,"user_tz":-480,"elapsed":15,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","\n","# Random Forest\n","metrics.plot_roc_curve(classifier_rf, X_test, y_test)  \n","# K-nn\n","metrics.plot_roc_curve(classifier_kn, X_test, y_test) \n","# Decision Tree\n","metrics.plot_roc_curve(classifier_dt, X_test, y_test)\n","# Naive Bayes\n","metrics.plot_roc_curve(classifier_nb, X_test, y_test) \n","# XGB\n","metrics.plot_roc_curve(classifier_xgb, X_test, y_test)  \n","\n","plt.show() "],"metadata":{"id":"e0MtrsiEpj5p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1653746300519,"user_tz":-480,"elapsed":1595,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"141c15fd-8e3a-4ef4-af97-6e4c8bba96b8"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["classifiers_all = [classifier_rf,classifier_kn,classifier_dt,classifier_nb,classifier_xgb]\n","ax = plt.gca()\n","for i in classifiers_all:\n","    metrics.plot_roc_curve(i, X_test, y_test, ax=ax)"],"metadata":{"id":"ZS82PTZ_lA_C","colab":{"base_uri":"https://localhost:8080/","height":473},"executionInfo":{"status":"ok","timestamp":1653746301248,"user_tz":-480,"elapsed":737,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3a5299ec-617a-444a-e6f6-235233452d39"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["############################################# 5.1 ###################################################\n","# (Class Imbalance / SMOTEENN + Random Forest)"],"metadata":{"id":"8qNa3Qm-kZ4X","executionInfo":{"status":"ok","timestamp":1653746301251,"user_tz":-480,"elapsed":21,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# SMOTE for class imbalance problem\n","from imblearn.combine import SMOTEENN\n","sm = SMOTEENN()\n","X_train_sen, y_train_sen = sm.fit_resample(X_train, y_train)\n","# re-shuffling and train model on re-sample data"],"metadata":{"id":"2-Uk9DrwkZ6t","executionInfo":{"status":"ok","timestamp":1653746301725,"user_tz":-480,"elapsed":491,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["#Call the Classifier\n","from sklearn.ensemble import RandomForestClassifier\n","sm_rf = RandomForestClassifier(n_estimators=10)\n","sm_rf.fit(X_train_sen, y_train_sen)"],"metadata":{"id":"DO9dAb1LkZ9b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746301726,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4770801f-b6d9-48ee-badc-53c66ca53c38"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=10)"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["y_pred_rrf = sm_rf.predict(X_test)\n","print(classification_report(y_test, y_pred_rrf))"],"metadata":{"id":"vh4ZDZeRkaAX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746301726,"user_tz":-480,"elapsed":22,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"fdc098c6-3bec-47c3-9955-f14ed40db89d"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.96      0.98       399\n","           1       0.06      1.00      0.11         1\n","\n","    accuracy                           0.96       400\n","   macro avg       0.53      0.98      0.55       400\n","weighted avg       1.00      0.96      0.98       400\n","\n"]}]},{"cell_type":"code","source":["result_rrf = confusion_matrix(y_test, y_pred_rrf)\n","print('Confusion Matrix')\n","print(result_rrf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ISHNv0K-uv65","executionInfo":{"status":"ok","timestamp":1653746301727,"user_tz":-480,"elapsed":17,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"597862a5-940f-4d65-db18-bf58b56feda0"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[383  16]\n"," [  0   1]]\n"]}]},{"cell_type":"code","source":["############################################# 5.2 ###################################################\n","# (Class Imbalance / SMOTEENN + XGBoost)"],"metadata":{"id":"eauSC_0G2JgW","executionInfo":{"status":"ok","timestamp":1653746301727,"user_tz":-480,"elapsed":9,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["sm = SMOTEENN()\n","X_resampled_xgb, y_resampled_xgb = sm.fit_resample(X, Y)"],"metadata":{"id":"ntxC2Ibr2Jj9","executionInfo":{"status":"ok","timestamp":1653746301728,"user_tz":-480,"elapsed":10,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["xr_train_xgb,xr_test_xgb,yr_train_xgb,yr_test_xgb=train_test_split(X_resampled_xgb, y_resampled_xgb,test_size=0.2)"],"metadata":{"id":"Celd6e93pL_W","executionInfo":{"status":"ok","timestamp":1653746301730,"user_tz":-480,"elapsed":11,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["classifier_xgb_smt=xgboost.XGBClassifier()\n","classifier_xgb_smt.fit(xr_train_xgb, yr_train_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pQ6lVWBGpMCt","executionInfo":{"status":"ok","timestamp":1653746302270,"user_tz":-480,"elapsed":551,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f5872bdd-b137-420f-a597-49f75fbf0036"},"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier()"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","source":["yr_predict_xgb_smt = classifier_xgb_smt.predict(xr_test_xgb)"],"metadata":{"id":"sqiGP5FqpMFQ","executionInfo":{"status":"ok","timestamp":1653746302271,"user_tz":-480,"elapsed":53,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["print('Accuracy is ' ,round(accuracy_score(yr_test_xgb, yr_predict_xgb_smt)*100,2), '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mL2d1fT4pMH1","executionInfo":{"status":"ok","timestamp":1653746302273,"user_tz":-480,"elapsed":53,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e685b54a-df83-4d1b-fa75-b5748c7c1820"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy is  99.34 %\n"]}]},{"cell_type":"code","source":["result1_xgb_smt = classification_report(yr_test_xgb, yr_predict_xgb_smt)\n","print(result1_xgb_smt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hf-L502qpYac","executionInfo":{"status":"ok","timestamp":1653746302275,"user_tz":-480,"elapsed":47,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6fc12f56-733a-4921-eb9b-364aec5c9561"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99       358\n","           1       0.99      1.00      0.99       401\n","\n","    accuracy                           0.99       759\n","   macro avg       0.99      0.99      0.99       759\n","weighted avg       0.99      0.99      0.99       759\n","\n"]}]},{"cell_type":"code","source":["result1_xgb_smt = confusion_matrix(yr_test_xgb, yr_predict_xgb_smt)\n","print('Confusion Matrix')\n","print(result1_xgb_smt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7NP26-QxvKBz","executionInfo":{"status":"ok","timestamp":1653746302275,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2367c2db-fda7-42e9-f8a4-0bc29dfdf556"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[353   5]\n"," [  0 401]]\n"]}]},{"cell_type":"code","source":["############################################# 5.3 ################################################### \n","\"\"\"\n","\"\"\"\n","# (Class Imbalance - XGBoost + Up/Down Sampling)"],"metadata":{"id":"RZwBOPk_kaDN","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653746302276,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b663eba2-8ffd-4b6d-c696-e70b37a3d955"},"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":68}]},{"cell_type":"code","source":["from sklearn.utils import resample\n","\n","data_majority = df[df['isFraud']==0]\n","data_minority = df[df['isFraud']==1]"],"metadata":{"id":"zkrq23aCkaF1","executionInfo":{"status":"ok","timestamp":1653746302277,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["data_majority.isFraud.value_counts()"],"metadata":{"id":"kVSW3aGLm6Eq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746302278,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f8f6306a-4749-4879-d0fd-4d55f5ed3ea7"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    1986\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["data_minority.isFraud.value_counts()"],"metadata":{"id":"mpmbGkg-m6il","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746302279,"user_tz":-480,"elapsed":23,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f0d5f689-1fd4-49ac-c054-37a6b1f96943"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    14\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["# Downsampling & Upsampling using resample method\n","len(df.loc[df['isFraud'] == 1])"],"metadata":{"id":"JaZgjsVvm6lM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746302638,"user_tz":-480,"elapsed":377,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a0e6e51b-1120-4ece-b91d-619abf65ba24"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["14"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["data_majority_downsample = resample(data_majority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 1]),    \n","                                 random_state=123) \n","data_minority_downsample = resample(data_minority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 1]),    \n","                                 random_state=123) \n","df_train = pd.concat([data_majority_downsample, data_minority_downsample])"],"metadata":{"id":"hzJaQMNmm6nx","executionInfo":{"status":"ok","timestamp":1653746302639,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["# Display new class counts\n","print (df_train.isFraud.value_counts())"],"metadata":{"id":"293uVdyTm6rB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746302640,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"17137dde-c964-46b8-d4bd-25324bb15093"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stdout","text":["0    14\n","1    14\n","Name: isFraud, dtype: int64\n"]}]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"id":"fnGbeCIjnBYJ","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1653746302642,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"34c14c8b-3400-41ef-abf6-9fbebf9a52ec"},"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","1545     1  15350.84       50020.61        34669.76             0.0   \n","1400     1  13693.11      392271.59       378578.48             0.0   \n","1417     1   3601.28       10621.00         7019.72             0.0   \n","1357     1   4074.17         574.00            0.00             0.0   \n","1133     1   3644.85       24111.00        20466.15             0.0   \n","\n","      newbalanceDest  isFraud  isFlaggedFraud  \n","1545             0.0        0               0  \n","1400             0.0        0               0  \n","1417             0.0        0               0  \n","1357             0.0        0               0  \n","1133             0.0        0               0  "],"text/html":["\n","  <div id=\"df-26216772-6a54-4d9c-b65e-5deb7b3eb9d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1545</th>\n","      <td>1</td>\n","      <td>15350.84</td>\n","      <td>50020.61</td>\n","      <td>34669.76</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1400</th>\n","      <td>1</td>\n","      <td>13693.11</td>\n","      <td>392271.59</td>\n","      <td>378578.48</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1417</th>\n","      <td>1</td>\n","      <td>3601.28</td>\n","      <td>10621.00</td>\n","      <td>7019.72</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1357</th>\n","      <td>1</td>\n","      <td>4074.17</td>\n","      <td>574.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1133</th>\n","      <td>1</td>\n","      <td>3644.85</td>\n","      <td>24111.00</td>\n","      <td>20466.15</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26216772-6a54-4d9c-b65e-5deb7b3eb9d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-26216772-6a54-4d9c-b65e-5deb7b3eb9d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-26216772-6a54-4d9c-b65e-5deb7b3eb9d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":75}]},{"cell_type":"code","source":["## Drop Categorical Features\n","df_train=df_train.drop(['isFlaggedFraud'],axis=1)"],"metadata":{"id":"2ciYCirpnBa0","executionInfo":{"status":"ok","timestamp":1653746302643,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["train, test = train_test_split(df_train, test_size = 0.2)\n"," \n","train_y_upsampled = train['isFraud']\n","test_y_upsampled = test['isFraud']\n"," \n","train_x_upsampled = train\n","train_x_upsampled.pop('isFraud')\n","test_x_upsampled = test\n","test_x_upsampled.pop('isFraud')"],"metadata":{"id":"J254OB4yqLg8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746302644,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"076bf877-ca0f-4609-b0cc-f714d1b8b156"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1116    1\n","3       1\n","1133    0\n","251     1\n","1869    1\n","1630    0\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["classifier_rsp=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n","       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n","       n_estimators=100, n_jobs=1, nthread=None,\n","       objective='binary:logistic', random_state=0, reg_alpha=0,\n","       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n","       subsample=1)\n","\n","\n","#XGBClassifier_balanced = XGBClassifier()\n","classifier_rsp.fit(X=train_x_upsampled, y=train_y_upsampled)\n"," \n","test_y_pred_balanced = classifier_rsp.predict(test_x_upsampled)\n","print('Accuracy of XGBoost classifier on test set: {:.2f}'.format(classifier_rsp.score(test_x_upsampled, test_y_upsampled)))\n","print(classification_report(test_y_upsampled, test_y_pred_balanced))\n","\n","\n","from sklearn.metrics import confusion_matrix, classification_report\n","confusion_matrix_us1 = confusion_matrix(test_y_upsampled, test_y_pred_balanced)\n","confusion_matrix_us2 = pd.DataFrame(confusion_matrix_us1, ('Is Fraud', 'Not Fraud'), ('Is Fraud', 'Not Fraud'))\n","heatmap = sns.heatmap(confusion_matrix_us2, annot=True, annot_kws={\"size\": 20}, fmt=\"d\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize = 14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize = 14)\n","plt.ylabel('True label', fontsize = 14)\n","plt.xlabel('Predicted label', fontsize = 14)"],"metadata":{"id":"wY0PrFX9qLl0","colab":{"base_uri":"https://localhost:8080/","height":650},"executionInfo":{"status":"ok","timestamp":1653746303531,"user_tz":-480,"elapsed":911,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2f3c78c1-ea84-490d-8f03-833ae112e336"},"execution_count":78,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGBoost classifier on test set: 0.33\n","              precision    recall  f1-score   support\n","\n","           0       0.33      1.00      0.50         2\n","           1       0.00      0.00      0.00         4\n","\n","    accuracy                           0.33         6\n","   macro avg       0.17      0.50      0.25         6\n","weighted avg       0.11      0.33      0.17         6\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 15.0, 'Predicted label')"]},"metadata":{},"execution_count":78},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["result_rrf_rsp = confusion_matrix(test_y_upsampled, test_y_pred_balanced)\n","print('Confusion Matrix')\n","print(result_rrf_rsp)"],"metadata":{"id":"BhGWQiUFaTO2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746303536,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"937dc312-953f-45f1-87a0-6c993cc7de8b"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[2 0]\n"," [4 0]]\n"]}]},{"cell_type":"code","source":["############################################# Up Sampling ################################################### \n","\"\"\"\n","\"\"\""],"metadata":{"id":"VJGrv2BnkaIf","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653746303538,"user_tz":-480,"elapsed":29,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"8e64e045-2f68-4543-bd75-d4d93c8db803"},"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["df_minority_upsampled = resample(data_minority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 0]),    \n","                                 random_state=123) \n","\n","df_train_up = pd.concat([data_majority, df_minority_upsampled])"],"metadata":{"id":"FotWfRJNjRp0","executionInfo":{"status":"ok","timestamp":1653746303542,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":81,"outputs":[]},{"cell_type":"code","source":["# Display new class counts\n","print (df_train_up.isFraud.value_counts())"],"metadata":{"id":"ZYhHoq2OkaUz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746304131,"user_tz":-480,"elapsed":620,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a2a8b5a6-6fdd-4144-80ff-676d8f53101d"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["0    1986\n","1    1986\n","Name: isFraud, dtype: int64\n"]}]},{"cell_type":"code","source":["df_train_up"],"metadata":{"id":"LISUWnhgjSUy","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1653746304133,"user_tz":-480,"elapsed":48,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a483a5b8-5948-4b41-c601-7ab9a4ea77be"},"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","0        1   9839.64      170136.00       160296.36            0.00   \n","1        1   1864.28       21249.00        19384.72            0.00   \n","4        1  11668.14       41554.00        29885.86            0.00   \n","5        1   7817.71       53860.00        46042.29            0.00   \n","6        1   7107.77      183195.00       176087.23            0.00   \n","...    ...       ...            ...             ...             ...   \n","2        1    181.00         181.00            0.00            0.00   \n","1870     1  25071.46       25071.46            0.00         9083.76   \n","3        1    181.00         181.00            0.00        21182.00   \n","1869     1  25071.46       25071.46            0.00            0.00   \n","681      1  20128.00       20128.00            0.00         6268.00   \n","\n","      newbalanceDest  isFraud  isFlaggedFraud  \n","0               0.00        0               0  \n","1               0.00        0               0  \n","4               0.00        0               0  \n","5               0.00        0               0  \n","6               0.00        0               0  \n","...              ...      ...             ...  \n","2               0.00        1               0  \n","1870        34155.22        1               0  \n","3               0.00        1               0  \n","1869            0.00        1               0  \n","681         12145.85        1               0  \n","\n","[3972 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-0ebb247e-3098-480a-b071-0d2740e48447\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>9839.64</td>\n","      <td>170136.00</td>\n","      <td>160296.36</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1864.28</td>\n","      <td>21249.00</td>\n","      <td>19384.72</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>11668.14</td>\n","      <td>41554.00</td>\n","      <td>29885.86</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>7817.71</td>\n","      <td>53860.00</td>\n","      <td>46042.29</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>7107.77</td>\n","      <td>183195.00</td>\n","      <td>176087.23</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1870</th>\n","      <td>1</td>\n","      <td>25071.46</td>\n","      <td>25071.46</td>\n","      <td>0.00</td>\n","      <td>9083.76</td>\n","      <td>34155.22</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.00</td>\n","      <td>0.00</td>\n","      <td>21182.00</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1869</th>\n","      <td>1</td>\n","      <td>25071.46</td>\n","      <td>25071.46</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>681</th>\n","      <td>1</td>\n","      <td>20128.00</td>\n","      <td>20128.00</td>\n","      <td>0.00</td>\n","      <td>6268.00</td>\n","      <td>12145.85</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3972 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ebb247e-3098-480a-b071-0d2740e48447')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0ebb247e-3098-480a-b071-0d2740e48447 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0ebb247e-3098-480a-b071-0d2740e48447');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["#df_train_up=df_train_up.drop(['isFlaggedFraud'],axis=1)"],"metadata":{"id":"Q9W1YXY3ksHq","executionInfo":{"status":"ok","timestamp":1653746304134,"user_tz":-480,"elapsed":48,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":84,"outputs":[]},{"cell_type":"code","source":["train, test = train_test_split(df_train_up, test_size = 0.2)\n"," \n","train_y_upsampled = train['isFraud']\n","test_y_upsampled = test['isFraud']\n"," \n","train_x_upsampled = train\n","train_x_upsampled.pop('isFraud')\n","test_x_upsampled = test\n","test_x_upsampled.pop('isFraud')"],"metadata":{"id":"zTw-8ba7msGH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746304135,"user_tz":-480,"elapsed":48,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"060bfbe1-437b-477e-fd9c-68cea593d7fb"},"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/plain":["969    1\n","681    1\n","877    0\n","969    1\n","185    0\n","      ..\n","3      1\n","251    1\n","680    1\n","251    1\n","970    1\n","Name: isFraud, Length: 795, dtype: int64"]},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["df_train_up.isFraud.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ejq4JNSGxfU","executionInfo":{"status":"ok","timestamp":1653746304136,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"53f6f27d-ce31-42c0-cb32-30ec0a56f918"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    1986\n","1    1986\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","classifier_2rsp=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n","       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n","       n_estimators=100, n_jobs=1, nthread=None,\n","       objective='binary:logistic', random_state=0, reg_alpha=0,\n","       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n","       subsample=1)\n","\n","\n","#XGBClassifier_balanced = XGBClassifier()\n","classifier_2rsp.fit(X=train_x_upsampled, y=train_y_upsampled)\n"," \n","test_y_pred_balanced_2rsp = classifier_2rsp.predict(test_x_upsampled)\n","print('Accuracy of XGBoost classifier on test set: {:.2f}'.format(classifier_2rsp.score(test_x_upsampled, test_y_upsampled)))\n","print(classification_report(test_y_upsampled, test_y_pred_balanced_2rsp))\n"],"metadata":{"id":"JnWvA7EWnns3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746304137,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5a2ef247-6281-4fba-d24e-47073a4a5993"},"execution_count":87,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGBoost classifier on test set: 1.00\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      1.00       389\n","           1       1.00      1.00      1.00       406\n","\n","    accuracy                           1.00       795\n","   macro avg       1.00      1.00      1.00       795\n","weighted avg       1.00      1.00      1.00       795\n","\n"]}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","result_rrf_rsp2 = confusion_matrix(test_y_upsampled, test_y_pred_balanced_2rsp)\n","print('Confusion Matrix')\n","print(result_rrf_rsp2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gUje96gDah5k","executionInfo":{"status":"ok","timestamp":1653746304138,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"baed06a5-a2ac-425d-ce31-537cf7070e77"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[387   2]\n"," [  0 406]]\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report\n","confusion_matrix_us_3 = confusion_matrix(test_y_upsampled, test_y_pred_balanced_2rsp)\n","confusion_matrix_us_4 = pd.DataFrame(confusion_matrix_us_3, ('Is Fraud', 'Not Fraud'), ('Is Fraud', 'Not Fraud'))\n","heatmap = sns.heatmap(confusion_matrix_us_4, annot=True, annot_kws={\"size\": 20}, fmt=\"d\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize = 14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize = 14)\n","plt.ylabel('True label', fontsize = 14)\n","plt.xlabel('Predicted label', fontsize = 14)\n"],"metadata":{"id":"u1a3c_drwTC_","colab":{"base_uri":"https://localhost:8080/","height":349},"executionInfo":{"status":"ok","timestamp":1653746304609,"user_tz":-480,"elapsed":493,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f8baeda6-eed3-4ffa-fe1a-14b58b2a7803"},"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 15.0, 'Predicted label')"]},"metadata":{},"execution_count":89},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["############################################# 6.1 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT - Raw Data"],"metadata":{"id":"9FaqKpi8kaLx","executionInfo":{"status":"ok","timestamp":1653746304611,"user_tz":-480,"elapsed":22,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":90,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","#leaf_size = [2,3,5,10]\n","n_estimators_list = [1,2,3,10]\n","\n","for estim_list in n_estimators_list:\n","    model_mhpt = RandomForestClassifier(n_estimators=estim_list)\n","    model_mhpt.fit(X_train, y_train)\n","    y_pred_mhpt = model_mhpt.predict(X_test)\n","    result_mhpt = confusion_matrix(y_test, y_pred_mhpt)\n","    result2_mhpt = accuracy_score(y_test, y_pred_mhpt)\n","    print('\\n Estimator value: ', estim_list)\n","    print('Accuracy: ', result2_mhpt)"],"metadata":{"id":"h1xDseAikaOC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746304612,"user_tz":-480,"elapsed":23,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"1c70dd88-7880-47af-88b9-f2e5a0a9677d"},"execution_count":91,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Estimator value:  1\n","Accuracy:  0.995\n","\n"," Estimator value:  2\n","Accuracy:  0.995\n","\n"," Estimator value:  3\n","Accuracy:  0.9925\n","\n"," Estimator value:  10\n","Accuracy:  0.9975\n"]}]},{"cell_type":"code","source":["leaf_size = [1,2,3,5,10]\n","\n","for i in leaf_size:\n","    model_mhpt = RandomForestClassifier(n_estimators=100, min_samples_leaf = i)\n","    model_mhpt.fit(X_train, y_train)\n","    y_pred_mhpt = model_mhpt.predict(X_test)\n","    result_mhpt = confusion_matrix(y_test, y_pred_mhpt)\n","    result2_mhpt = accuracy_score(y_test, y_pred_mhpt)\n","    print('\\n Leaf size: ', i)\n","    print('Accuracy: ', result2_mhpt)"],"metadata":{"id":"Y1WbzvqQkaTF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746307868,"user_tz":-480,"elapsed":3272,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7ea2b78d-446b-4ef4-987f-4a4f9def4577"},"execution_count":92,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Leaf size:  1\n","Accuracy:  0.9975\n","\n"," Leaf size:  2\n","Accuracy:  0.9975\n","\n"," Leaf size:  3\n","Accuracy:  0.9975\n","\n"," Leaf size:  5\n","Accuracy:  0.9975\n","\n"," Leaf size:  10\n","Accuracy:  0.9975\n"]}]},{"cell_type":"code","source":["############################################# 6.2 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - Raw Data"],"metadata":{"id":"o2EJ9_kOkaV5","executionInfo":{"status":"ok","timestamp":1653746307869,"user_tz":-480,"elapsed":47,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":93,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","n_estimators_rs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FoIQ4VqtxI0X","executionInfo":{"status":"ok","timestamp":1653746307869,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"29af53f1-c8e3-4a18-91ea-c5ae6d524d70"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators_rs,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","print(random_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WwNshVoNxI3M","executionInfo":{"status":"ok","timestamp":1653746307870,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"49546bac-5206-45ba-956a-617a6512318a"},"execution_count":95,"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"]}]},{"cell_type":"code","source":["\"\"\"\n","24 seconds\n","\"\"\"\n","# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestClassifier()\n","# Random search of parameters, using 3 fold cross validation, \n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 3, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kIVZZGTKxI5t","executionInfo":{"status":"ok","timestamp":1653746323628,"user_tz":-480,"elapsed":15779,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"dcd16c62-a695-46d1-c293-cc9b3d526bfd"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=3,\n","                   n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"]},"metadata":{},"execution_count":96}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    accuracy = accuracy_score(test_labels,predictions)\n","    print('Model Performance')\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    return accuracy"],"metadata":{"id":"3D7XqwAWxI8I","executionInfo":{"status":"ok","timestamp":1653746323629,"user_tz":-480,"elapsed":29,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":97,"outputs":[]},{"cell_type":"code","source":["base_model = RandomForestClassifier(n_estimators = 10, random_state = 42)\n","base_model.fit(X_train, y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i_TV_fdGxI-b","executionInfo":{"status":"ok","timestamp":1653746323631,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"32da89c9-245a-4c70-fc7e-fac70b023171"},"execution_count":98,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 0.99%.\n"]}]},{"cell_type":"code","source":["best_random = rf_random.best_estimator_\n","print(best_random)\n","random_accuracy = evaluate(best_random, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LXKPBlBsxJBI","executionInfo":{"status":"ok","timestamp":1653746324263,"user_tz":-480,"elapsed":658,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"06de5a25-c1c3-48b2-abd8-fb30db55de89"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["RandomForestClassifier(bootstrap=False, max_depth=30, min_samples_leaf=2,\n","                       n_estimators=1000)\n","Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["best_random"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a092HwgbxJEB","executionInfo":{"status":"ok","timestamp":1653746324266,"user_tz":-480,"elapsed":41,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"34ecab3c-623e-47b1-d173-27559f7b72b7"},"execution_count":100,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=False, max_depth=30, min_samples_leaf=2,\n","                       n_estimators=1000)"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"37sNgzxxxJGC","executionInfo":{"status":"ok","timestamp":1653746324267,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2830532a-5e06-4334-b2ee-7958c4458dfc"},"execution_count":101,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.25%.\n"]}]},{"cell_type":"code","source":["############################################# 6.3 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - Raw Data"],"metadata":{"id":"cX8w_9O6xJI3","executionInfo":{"status":"ok","timestamp":1653746324268,"user_tz":-480,"elapsed":25,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":102,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}"],"metadata":{"id":"bOeENcTT0ffG","executionInfo":{"status":"ok","timestamp":1653746324269,"user_tz":-480,"elapsed":25,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":103,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}\n","# Create a based model\n","rf_gd = RandomForestClassifier()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf_gd, param_grid = param_grid, \n","                          cv = 2, n_jobs = -1, verbose = 2)"],"metadata":{"id":"m6FphPAi0fkN","executionInfo":{"status":"ok","timestamp":1653746324269,"user_tz":-480,"elapsed":24,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":104,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","14 mins\n","\"\"\"\n","# Fit the grid search to the data\n","grid_search.fit(X_train, y_train)\n","grid_search.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DnzzFoC20fmX","executionInfo":{"status":"ok","timestamp":1653746625616,"user_tz":-480,"elapsed":301370,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0dd141cf-b2b8-482b-bb7a-626f6feea648"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 288 candidates, totalling 576 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': True,\n"," 'max_depth': 80,\n"," 'max_features': 3,\n"," 'min_samples_leaf': 3,\n"," 'min_samples_split': 10,\n"," 'n_estimators': 100}"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RGcscYxt0fof","executionInfo":{"status":"ok","timestamp":1653746625622,"user_tz":-480,"elapsed":179,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2c9a7842-57ad-4c6c-aec7-3b8ceb17c686"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 0.99%.\n"]}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rPY7pju80fra","executionInfo":{"status":"ok","timestamp":1653746625625,"user_tz":-480,"elapsed":138,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"91226b22-9565-42ab-b535-225768dbe4b6"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of -0.13%.\n"]}]},{"cell_type":"code","source":["best_grid"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9mvx10CC0f1E","executionInfo":{"status":"ok","timestamp":1653746625627,"user_tz":-480,"elapsed":125,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f8fbbe71-cf10-4736-b5f4-cc945bd5d8bb"},"execution_count":108,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=80, max_features=3, min_samples_leaf=3,\n","                       min_samples_split=10)"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["############################################# 6.4 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search + XGBoost - Raw Data"],"metadata":{"id":"wb1CUkIX3WZB","executionInfo":{"status":"ok","timestamp":1653746625628,"user_tz":-480,"elapsed":106,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["## Hyper Parameter Optimization\n","\n","params={\n"," \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n"," \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n"," \"min_child_weight\" : [ 1, 3, 5, 7 ],\n"," \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n"," \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n","    \n","}"],"metadata":{"id":"A2jj7F0o3WjW","executionInfo":{"status":"ok","timestamp":1653746625630,"user_tz":-480,"elapsed":104,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":["## Hyperparameter optimization using RandomizedSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"],"metadata":{"id":"tdmir92U3WmU","executionInfo":{"status":"ok","timestamp":1653746625633,"user_tz":-480,"elapsed":106,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":111,"outputs":[]},{"cell_type":"code","source":["def timer(start_time=None):\n","    if not start_time:\n","        start_time = datetime.now()\n","        return start_time\n","    elif start_time:\n","        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n","        tmin, tsec = divmod(temp_sec, 60)\n","        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))"],"metadata":{"id":"nMlokhb-3Wo4","executionInfo":{"status":"ok","timestamp":1653746625634,"user_tz":-480,"elapsed":104,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":112,"outputs":[]},{"cell_type":"code","source":["classifier_new=xgboost.XGBClassifier()"],"metadata":{"id":"B4FqxejQ3WsG","executionInfo":{"status":"ok","timestamp":1653746625635,"user_tz":-480,"elapsed":103,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":113,"outputs":[]},{"cell_type":"code","source":["random_search=RandomizedSearchCV(classifier_new,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=3,verbose=3)"],"metadata":{"id":"umO3w7Ld3WvT","executionInfo":{"status":"ok","timestamp":1653746625636,"user_tz":-480,"elapsed":101,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":114,"outputs":[]},{"cell_type":"code","source":["from datetime import datetime\n","# Here we go\n","start_time = timer(None) # timing starts from this point for \"start_time\" variable\n","random_search.fit(X,Y)\n","timer(start_time) # timing ends here for \"start_time\" variable"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y3N9zS_83WyB","executionInfo":{"status":"ok","timestamp":1653746626471,"user_tz":-480,"elapsed":934,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"61d40dc0-1cd5-4999-cfd9-9952269c774a"},"execution_count":115,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","\n"," Time taken: 0 hours 0 minutes and 0.75 seconds.\n"]}]},{"cell_type":"code","source":["random_search.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E15y5XJZ3t0n","executionInfo":{"status":"ok","timestamp":1653746626476,"user_tz":-480,"elapsed":91,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"30a6af63-f81e-4bfd-cb5d-531bacec831f"},"execution_count":116,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(colsample_bytree=0.4, gamma=0.3, learning_rate=0.15, max_depth=5)"]},"metadata":{},"execution_count":116}]},{"cell_type":"code","source":["random_search.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJhjLitt3ug6","executionInfo":{"status":"ok","timestamp":1653746626481,"user_tz":-480,"elapsed":88,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"c5eea3da-399c-4c32-b49b-c12cf156497c"},"execution_count":117,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'colsample_bytree': 0.4,\n"," 'gamma': 0.3,\n"," 'learning_rate': 0.15,\n"," 'max_depth': 5,\n"," 'min_child_weight': 1}"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["############################################# 7.1 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT --> 5.2 SMOTEENN Data - RF Classifier"],"metadata":{"id":"n03Tx84E6EAn","executionInfo":{"status":"ok","timestamp":1653746626484,"user_tz":-480,"elapsed":82,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":118,"outputs":[]},{"cell_type":"code","source":["xr_train_xgb.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YVUmY3WBFez5","executionInfo":{"status":"ok","timestamp":1653746626490,"user_tz":-480,"elapsed":86,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f2c22f1a-852f-4100-d1d2-30d294c388a8"},"execution_count":119,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step       amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","3770     1   2848.39297   2.848393e+03            0.00    19187.640008   \n","567      1  21255.80000   3.113581e+06      3134837.27    52109.000000   \n","1243     1   1737.12000   3.190814e+04        30171.02        0.000000   \n","625      1   5363.00000   2.126000e+04        15897.00    24765.260000   \n","1538     1   9632.45000   5.130000e+02            0.00        0.000000   \n","\n","      newbalanceDest  \n","3770     1624.191854  \n","567         0.000000  \n","1243        0.000000  \n","625     18910.850000  \n","1538        0.000000  "],"text/html":["\n","  <div id=\"df-fd2ee099-dc6e-48fc-bf29-4b2d679d56ea\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3770</th>\n","      <td>1</td>\n","      <td>2848.39297</td>\n","      <td>2.848393e+03</td>\n","      <td>0.00</td>\n","      <td>19187.640008</td>\n","      <td>1624.191854</td>\n","    </tr>\n","    <tr>\n","      <th>567</th>\n","      <td>1</td>\n","      <td>21255.80000</td>\n","      <td>3.113581e+06</td>\n","      <td>3134837.27</td>\n","      <td>52109.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1243</th>\n","      <td>1</td>\n","      <td>1737.12000</td>\n","      <td>3.190814e+04</td>\n","      <td>30171.02</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>625</th>\n","      <td>1</td>\n","      <td>5363.00000</td>\n","      <td>2.126000e+04</td>\n","      <td>15897.00</td>\n","      <td>24765.260000</td>\n","      <td>18910.850000</td>\n","    </tr>\n","    <tr>\n","      <th>1538</th>\n","      <td>1</td>\n","      <td>9632.45000</td>\n","      <td>5.130000e+02</td>\n","      <td>0.00</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd2ee099-dc6e-48fc-bf29-4b2d679d56ea')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fd2ee099-dc6e-48fc-bf29-4b2d679d56ea button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fd2ee099-dc6e-48fc-bf29-4b2d679d56ea');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":119}]},{"cell_type":"code","source":["yr_train_xgb.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-4EVcmB1Ffbl","executionInfo":{"status":"ok","timestamp":1653746626493,"user_tz":-480,"elapsed":76,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"928b807c-43c4-43fd-9e20-99f0c2cde22b"},"execution_count":120,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3770    1\n","567     0\n","1243    0\n","625     0\n","1538    0\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":120}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","#leaf_size = [2,3,5,10]\n","n_estimators_list = [1,2,3,10]\n","\n","for estim_list in n_estimators_list:\n","    model_mhpt_FNL = RandomForestClassifier(n_estimators=estim_list)\n","    model_mhpt_FNL.fit(xr_train_xgb, yr_train_xgb) #\n","    y_pred_mhpt_FNL = model_mhpt_FNL.predict(xr_test_xgb) #\n","    result_mhpt_FNL = confusion_matrix(yr_test_xgb, y_pred_mhpt_FNL) #\n","    result2_mhpt_FNL = accuracy_score(yr_test_xgb, y_pred_mhpt_FNL)  #\n","    print('\\n Estimator value: ', estim_list)\n","    print('Accuracy: ', result2_mhpt_FNL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oDKDpUSc6EXO","executionInfo":{"status":"ok","timestamp":1653746626497,"user_tz":-480,"elapsed":70,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"1450c791-768e-4daa-97f8-5065828ce572"},"execution_count":121,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Estimator value:  1\n","Accuracy:  0.9907773386034255\n","\n"," Estimator value:  2\n","Accuracy:  0.9894598155467721\n","\n"," Estimator value:  3\n","Accuracy:  0.9934123847167325\n","\n"," Estimator value:  10\n","Accuracy:  0.994729907773386\n"]}]},{"cell_type":"code","source":["leaf_size = [1,2,3,5,10]\n","\n","for i in leaf_size:\n","    model_mhpt_FNL = RandomForestClassifier(n_estimators=100, min_samples_leaf = i)\n","    model_mhpt_FNL.fit(xr_train_xgb, yr_train_xgb) #\n","    y_pred_mhpt_FNL = model_mhpt_FNL.predict(xr_test_xgb) #\n","    result_mhpt_FNL = confusion_matrix(yr_test_xgb, y_pred_mhpt_FNL) #\n","    result2_mhpt_FNL = accuracy_score(yr_test_xgb, y_pred_mhpt_FNL) #\n","    print('\\n Leaf size: ', i)\n","    print('Accuracy: ', result2_mhpt_FNL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NrPr8RBIDiC0","executionInfo":{"status":"ok","timestamp":1653746628666,"user_tz":-480,"elapsed":2232,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5eb73e53-941f-4d90-cd91-f99a993e9eb6"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Leaf size:  1\n","Accuracy:  0.994729907773386\n","\n"," Leaf size:  2\n","Accuracy:  0.994729907773386\n","\n"," Leaf size:  3\n","Accuracy:  0.9934123847167325\n","\n"," Leaf size:  5\n","Accuracy:  0.9934123847167325\n","\n"," Leaf size:  10\n","Accuracy:  0.9934123847167325\n"]}]},{"cell_type":"code","source":["train_x_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0viCkakLG16_","executionInfo":{"status":"ok","timestamp":1653746628669,"user_tz":-480,"elapsed":107,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7cd4f219-b65c-47a9-a40e-9ebfc3552644"},"execution_count":123,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3177, 7)"]},"metadata":{},"execution_count":123}]},{"cell_type":"code","source":["train_y_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EEPxpAVcG656","executionInfo":{"status":"ok","timestamp":1653746628679,"user_tz":-480,"elapsed":107,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2f977ec2-de82-4c63-b12e-1e52bbabf4cf"},"execution_count":124,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3177,)"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","source":["test_x_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ZeuGpueG9HK","executionInfo":{"status":"ok","timestamp":1653746628680,"user_tz":-480,"elapsed":99,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"c5250988-35be-4f92-cc81-8c334aa5ab93"},"execution_count":125,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(795, 7)"]},"metadata":{},"execution_count":125}]},{"cell_type":"code","source":["test_y_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cq09W4IxG_z-","executionInfo":{"status":"ok","timestamp":1653746628685,"user_tz":-480,"elapsed":92,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7a4d8186-b948-4b3c-8a41-94fc9a9d3994"},"execution_count":126,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(795,)"]},"metadata":{},"execution_count":126}]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0XXRqC2HMb83","executionInfo":{"status":"ok","timestamp":1653746628686,"user_tz":-480,"elapsed":83,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3d5bfcb5-0428-449f-a501-f0c61df4532f"},"execution_count":127,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","1545     1  15350.84       50020.61        34669.76             0.0   \n","1400     1  13693.11      392271.59       378578.48             0.0   \n","1417     1   3601.28       10621.00         7019.72             0.0   \n","1357     1   4074.17         574.00            0.00             0.0   \n","1133     1   3644.85       24111.00        20466.15             0.0   \n","\n","      newbalanceDest  isFraud  \n","1545             0.0        0  \n","1400             0.0        0  \n","1417             0.0        0  \n","1357             0.0        0  \n","1133             0.0        0  "],"text/html":["\n","  <div id=\"df-d25e5eb4-acc6-40e7-820d-7e12f539a486\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1545</th>\n","      <td>1</td>\n","      <td>15350.84</td>\n","      <td>50020.61</td>\n","      <td>34669.76</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1400</th>\n","      <td>1</td>\n","      <td>13693.11</td>\n","      <td>392271.59</td>\n","      <td>378578.48</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1417</th>\n","      <td>1</td>\n","      <td>3601.28</td>\n","      <td>10621.00</td>\n","      <td>7019.72</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1357</th>\n","      <td>1</td>\n","      <td>4074.17</td>\n","      <td>574.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1133</th>\n","      <td>1</td>\n","      <td>3644.85</td>\n","      <td>24111.00</td>\n","      <td>20466.15</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d25e5eb4-acc6-40e7-820d-7e12f539a486')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d25e5eb4-acc6-40e7-820d-7e12f539a486 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d25e5eb4-acc6-40e7-820d-7e12f539a486');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["############################################# 7.2 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - SMOTEENN Data - RF Classifier"],"metadata":{"id":"qBoYfkvh6EbB","executionInfo":{"status":"ok","timestamp":1653746628689,"user_tz":-480,"elapsed":77,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":128,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","n_estimators_rs"],"metadata":{"id":"mPo-fj-HDith","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746628697,"user_tz":-480,"elapsed":84,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0de541ff-e010-423a-8c69-c36aa3f67ad0"},"execution_count":129,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]"]},"metadata":{},"execution_count":129}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators_rs,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","print(random_grid)"],"metadata":{"id":"Uh8NO1BYDiwY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746628703,"user_tz":-480,"elapsed":80,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"1730a5d4-02d1-480e-8bb0-8ba5d1af0577"},"execution_count":130,"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"]}]},{"cell_type":"code","source":["\"\"\"\n","5 mins\n","\"\"\"\n","# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestClassifier()\n","# Random search of parameters, using 3 fold cross validation, \n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(xr_train_xgb, yr_train_xgb) ##"],"metadata":{"id":"E6B4pMcjDizB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746688760,"user_tz":-480,"elapsed":60128,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e6fb1440-df67-4df7-c294-2d985f3e3a9e"},"execution_count":131,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"]},"metadata":{},"execution_count":131}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    accuracy = accuracy_score(test_labels,predictions)\n","    print('Model Performance')\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    return accuracy"],"metadata":{"id":"ONLSsQbhDi1s","executionInfo":{"status":"ok","timestamp":1653746688764,"user_tz":-480,"elapsed":542,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":132,"outputs":[]},{"cell_type":"code","source":["base_model = RandomForestClassifier(n_estimators = 10, random_state = 42)\n","base_model.fit(xr_train_xgb, yr_train_xgb)\n","base_accuracy = evaluate(base_model, xr_test_xgb, yr_test_xgb)"],"metadata":{"id":"DhQN5q7xD80O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746688765,"user_tz":-480,"elapsed":541,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f3bd13a5-5965-45ed-9070-16d2ad2d133b"},"execution_count":133,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 0.99%.\n"]}]},{"cell_type":"code","source":["best_random = rf_random.best_estimator_\n","print(best_random)\n","random_accuracy = evaluate(best_random, xr_test_xgb, yr_test_xgb)"],"metadata":{"id":"cgWMLzZcD83Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746688781,"user_tz":-480,"elapsed":485,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"55edbb7c-790a-43f7-fd72-9a2e7c7340fa"},"execution_count":134,"outputs":[{"output_type":"stream","name":"stdout","text":["RandomForestClassifier(bootstrap=False, max_depth=10, min_samples_split=5,\n","                       n_estimators=1200)\n","Model Performance\n","Accuracy = 0.99%.\n"]}]},{"cell_type":"code","source":["best_random"],"metadata":{"id":"C52xZKTGD86A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746688806,"user_tz":-480,"elapsed":484,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"24494686-667e-4334-d4ea-69c5d34f84ee"},"execution_count":135,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=False, max_depth=10, min_samples_split=5,\n","                       n_estimators=1200)"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"id":"YMtHnIGpDi4C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653746688811,"user_tz":-480,"elapsed":433,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"186ab9fa-1313-43af-b7d3-d408b22c7643"},"execution_count":136,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.00%.\n"]}]},{"cell_type":"code","source":["############################################# 7.3 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - SMOTEENN Data - RF Classifier"],"metadata":{"id":"I99Zb0BJ6Eds","executionInfo":{"status":"ok","timestamp":1653746688813,"user_tz":-480,"elapsed":336,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":137,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}"],"metadata":{"id":"_j34uqvbDjpM","executionInfo":{"status":"ok","timestamp":1653746688815,"user_tz":-480,"elapsed":336,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":138,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}\n","# Create a based model\n","rf_gd = RandomForestClassifier()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf_gd, param_grid = param_grid, \n","                          cv = 2, n_jobs = -1, verbose = 2)"],"metadata":{"id":"zSwJ-C2fDjsE","executionInfo":{"status":"ok","timestamp":1653746689761,"user_tz":-480,"elapsed":66,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":139,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","26 mins\n","\"\"\"\n","# Fit the grid search to the data\n","grid_search.fit(xr_train_xgb, yr_train_xgb) #\n","grid_search.best_params_"],"metadata":{"id":"RfS0Uzh5Djuk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747085718,"user_tz":-480,"elapsed":396017,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"36ecd364-bb97-4043-df8a-95106bfbbb80"},"execution_count":140,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 288 candidates, totalling 576 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': True,\n"," 'max_depth': 80,\n"," 'max_features': 2,\n"," 'min_samples_leaf': 3,\n"," 'min_samples_split': 10,\n"," 'n_estimators': 100}"]},"metadata":{},"execution_count":140}]},{"cell_type":"code","source":["best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, xr_train_xgb, yr_train_xgb)"],"metadata":{"id":"sNhnnSOuDjxU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747085718,"user_tz":-480,"elapsed":50,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0361e745-b78e-49db-fc37-e03447d0365c"},"execution_count":141,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"id":"3hTQswxrDjzz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747085719,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4e2132c1-7f27-4609-9e88-c635e820d329"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.40%.\n"]}]},{"cell_type":"code","source":["best_grid"],"metadata":{"id":"4BpyDGFzEJLk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747085719,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b96396d9-9903-4f5f-872a-24323c1ab89f"},"execution_count":143,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=80, max_features=2, min_samples_leaf=3,\n","                       min_samples_split=10)"]},"metadata":{},"execution_count":143}]},{"cell_type":"code","source":["############################################# 7.4 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - SMOTEENN Data - XGBoost Classifier"],"metadata":{"id":"RHJ2O3Uo6EhE","executionInfo":{"status":"ok","timestamp":1653747085720,"user_tz":-480,"elapsed":19,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":144,"outputs":[]},{"cell_type":"code","source":["## Hyper Parameter Optimization\n","\n","params={\n"," \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n"," \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n"," \"min_child_weight\" : [ 1, 3, 5, 7 ],\n"," \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n"," \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n","    \n","}"],"metadata":{"id":"0ynatTtUDknl","executionInfo":{"status":"ok","timestamp":1653747085720,"user_tz":-480,"elapsed":18,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":145,"outputs":[]},{"cell_type":"code","source":["## Hyperparameter optimization using RandomizedSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"],"metadata":{"id":"dqvqfrw8DkqZ","executionInfo":{"status":"ok","timestamp":1653747085721,"user_tz":-480,"elapsed":19,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":146,"outputs":[]},{"cell_type":"code","source":["def timer(start_time=None):\n","    if not start_time:\n","        start_time = datetime.now()\n","        return start_time\n","    elif start_time:\n","        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n","        tmin, tsec = divmod(temp_sec, 60)\n","        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))"],"metadata":{"id":"N6wO6K0BDktV","executionInfo":{"status":"ok","timestamp":1653747085721,"user_tz":-480,"elapsed":18,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":147,"outputs":[]},{"cell_type":"code","source":["classifier_new=xgboost.XGBClassifier()"],"metadata":{"id":"R4Z7tc3yDkv3","executionInfo":{"status":"ok","timestamp":1653747085722,"user_tz":-480,"elapsed":19,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":148,"outputs":[]},{"cell_type":"code","source":["random_search=RandomizedSearchCV(classifier_new,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=3,verbose=3)"],"metadata":{"id":"tJtVrmOIDkyP","executionInfo":{"status":"ok","timestamp":1653747085722,"user_tz":-480,"elapsed":18,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":149,"outputs":[]},{"cell_type":"code","source":["from datetime import datetime\n","# Here we go\n","start_time = timer(None) # timing starts from this point for \"start_time\" variable\n","random_search.fit(xr_train_xgb, yr_train_xgb) #\n","timer(start_time) # timing ends here for \"start_time\" variable"],"metadata":{"id":"aGYGZcHc6Ekq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747087622,"user_tz":-480,"elapsed":1918,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"aeedfb11-5bda-4263-de40-0e1308f0cb88"},"execution_count":150,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","\n"," Time taken: 0 hours 0 minutes and 1.71 seconds.\n"]}]},{"cell_type":"code","source":["random_search.best_estimator_"],"metadata":{"id":"E4N5jhk0ER_2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747087623,"user_tz":-480,"elapsed":40,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4f9600f9-31fc-4614-aca9-0b1d3dab1dbb"},"execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(colsample_bytree=0.7, gamma=0.0, learning_rate=0.15, max_depth=15)"]},"metadata":{},"execution_count":151}]},{"cell_type":"code","source":["random_search.best_params_"],"metadata":{"id":"t0rfG1afESG0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747087635,"user_tz":-480,"elapsed":47,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9be330e3-934e-48fb-940d-6d3749530620"},"execution_count":152,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'colsample_bytree': 0.7,\n"," 'gamma': 0.0,\n"," 'learning_rate': 0.15,\n"," 'max_depth': 15,\n"," 'min_child_weight': 1}"]},"metadata":{},"execution_count":152}]},{"cell_type":"code","source":["############################################# 7.5 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT --> 5.3 ReSampling Data"],"metadata":{"id":"z5lyTRAwJeHk","executionInfo":{"status":"ok","timestamp":1653747087635,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":153,"outputs":[]},{"cell_type":"code","source":["############################################# 7.6 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - 5.3 ReSampling Data"],"metadata":{"id":"Xdj049xVJeLr","executionInfo":{"status":"ok","timestamp":1653747087636,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":154,"outputs":[]},{"cell_type":"code","source":["############################################# 7.7 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - 5.3 ReSampling Data"],"metadata":{"id":"IhtW69N9JeQy","executionInfo":{"status":"ok","timestamp":1653747087636,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":155,"outputs":[]},{"cell_type":"code","source":["############################################# 7.8 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search + XGBoost - 5.3 ReSampling Data"],"metadata":{"id":"8FWEcIKrJeUT","executionInfo":{"status":"ok","timestamp":1653747087637,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":156,"outputs":[]},{"cell_type":"code","source":["############################################# 8.1 ###################################################\n","\n","# Applying HPO to XGBoost on SMOTENN Data"],"metadata":{"id":"oQLXeUgq4Kt4","executionInfo":{"status":"ok","timestamp":1653747087637,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":157,"outputs":[]},{"cell_type":"code","source":["classifier_SM_HPO_FINAL=xgboost.XGBClassifier(colsample_bytree=0.7, gamma=0.4, learning_rate=0.25, max_depth=12, min_child_weight=7) \n","# insert best params here"],"metadata":{"id":"qrINzIU-4LW0","executionInfo":{"status":"ok","timestamp":1653747087638,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":158,"outputs":[]},{"cell_type":"code","source":["classifier_SM_HPO_FINAL = classifier_SM_HPO_FINAL.fit(xr_train_xgb,yr_train_xgb)\n","\n","#At last we need to make prediction. It can be done with the help of following script −\n","y_pred_SM_HPO_FINAL = classifier_SM_HPO_FINAL.predict(xr_test_xgb)"],"metadata":{"id":"DIANZlHU4Sn0","executionInfo":{"status":"ok","timestamp":1653747087638,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":159,"outputs":[]},{"cell_type":"code","source":["#Next, we can get the accuracy score, confusion matrix and classification report as follows −\n","result_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print(\"Confusion Matrix:\")\n","print(result_SM_HPO_FINAL)\n","result1_SM_HPO_FINAL = classification_report(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print(\"Classification Report:\",)\n","print (result1_SM_HPO_FINAL)\n","result2_SM_HPO_FINAL = accuracy_score(yr_test_xgb,y_pred_SM_HPO_FINAL)\n","print(\"Accuracy:\",result2_SM_HPO_FINAL)"],"metadata":{"id":"C6xzE5Nw4Sqy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747087639,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"596dfdb7-2581-43e2-be12-443ac66a88a1"},"execution_count":160,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[354   4]\n"," [  1 400]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99       358\n","           1       0.99      1.00      0.99       401\n","\n","    accuracy                           0.99       759\n","   macro avg       0.99      0.99      0.99       759\n","weighted avg       0.99      0.99      0.99       759\n","\n","Accuracy: 0.9934123847167325\n"]}]},{"cell_type":"code","source":["result3_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print('Confusion Matrix')\n","print(result3_SM_HPO_FINAL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ke9FYLjM64P1","executionInfo":{"status":"ok","timestamp":1653747088071,"user_tz":-480,"elapsed":456,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3dcd0299-5a93-43db-cb55-2134fb0a9a9e"},"execution_count":161,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[354   4]\n"," [  1 400]]\n"]}]},{"cell_type":"code","source":["############################################# 8.2 ###################################################\n","\n","# Applying HPO to Random Forest"],"metadata":{"id":"-TLcNS6k0f4F","executionInfo":{"status":"ok","timestamp":1653747088072,"user_tz":-480,"elapsed":6,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":162,"outputs":[]},{"cell_type":"code","source":["# Fitting RFClassifier to the Training set\n","from sklearn.ensemble import RandomForestClassifier\n","classifier_2_SM_HPO_FINAL = RandomForestClassifier(max_depth=90, max_features=2, min_samples_leaf=3, min_samples_split=8, n_estimators=200) \n","# insert HPO here\n","classifier_2_SM_HPO_FINAL.fit(xr_train_xgb, yr_train_xgb)"],"metadata":{"id":"T379zcYf0wD2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747088603,"user_tz":-480,"elapsed":536,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"cf232973-99c2-47e3-e58e-b76792e6969e"},"execution_count":163,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=90, max_features=2, min_samples_leaf=3,\n","                       min_samples_split=8, n_estimators=200)"]},"metadata":{},"execution_count":163}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_2_SM_HPO_FINAL = classifier_2_SM_HPO_FINAL.predict(xr_test_xgb)"],"metadata":{"id":"cxvA7K1n0wHH","executionInfo":{"status":"ok","timestamp":1653747088604,"user_tz":-480,"elapsed":52,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":164,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_2_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Confusion Matrix')\n","print(result_2_SM_HPO_FINAL)"],"metadata":{"id":"CLbviAuJ0wJ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747088606,"user_tz":-480,"elapsed":53,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"c88fba6d-1765-4c7b-99cc-30c8b96e6a13"},"execution_count":165,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[354   4]\n"," [  1 400]]\n"]}]},{"cell_type":"code","source":["result1_2_SM_HPO_FINAL = classification_report(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Classification Report')\n","print(result1_2_SM_HPO_FINAL)"],"metadata":{"id":"7BcIO2ln0wM4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747088612,"user_tz":-480,"elapsed":48,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5a36fa76-3b02-42ff-e877-0b5667547458"},"execution_count":166,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99       358\n","           1       0.99      1.00      0.99       401\n","\n","    accuracy                           0.99       759\n","   macro avg       0.99      0.99      0.99       759\n","weighted avg       0.99      0.99      0.99       759\n","\n"]}]},{"cell_type":"code","source":["result2_2_SM_HPO_FINAL = accuracy_score(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Accuracy: ', result2_2_SM_HPO_FINAL)"],"metadata":{"id":"UfsF9ayz0wO7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653747088615,"user_tz":-480,"elapsed":44,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9da1df5e-8ef5-4302-cac5-60e79993c027"},"execution_count":167,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.9934123847167325\n"]}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","\n","\"\"\"\n","\"\"\"\n","\n","#########################################################################################################################"],"metadata":{"id":"Zjq4VIMn0f-E","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653747088618,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"de6ab6fb-be7a-4007-bebb-f45929f195fd"},"execution_count":168,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":168}]}]}