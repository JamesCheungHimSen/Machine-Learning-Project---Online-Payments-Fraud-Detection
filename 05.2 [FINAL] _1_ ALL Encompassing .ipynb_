{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"05.2 [FINAL] <1> ALL Encompassing .ipynb ","provenance":[],"collapsed_sections":[],"mount_file_id":"18f6X4rAwhcNn3vsFQ5HdigVtY20sQXjw","authorship_tag":"ABX9TyP5ujscjrEV41gSJlixfWFv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"2OkT8hlbJDXr","executionInfo":{"status":"ok","timestamp":1653755955751,"user_tz":-480,"elapsed":289,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"outputs":[],"source":["# https://www.kaggle.com/datasets/rupakroy/online-payments-fraud-detection-dataset"]},{"cell_type":"code","source":["############################################# 1. ################################################### \n","# (Import Data / EDA)"],"metadata":{"id":"G6T6IORrjHzQ","executionInfo":{"status":"ok","timestamp":1653755958065,"user_tz":-480,"elapsed":940,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import xgboost\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score"],"metadata":{"id":"RIAeJAqZi3ta","executionInfo":{"status":"ok","timestamp":1653755959221,"user_tz":-480,"elapsed":1163,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# Mounting the google colab drive\n","from google.colab import drive\n","drive.mount('/content/drive/')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_qwCVGb0JKye","executionInfo":{"status":"ok","timestamp":1653755977777,"user_tz":-480,"elapsed":18563,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"100ae0cf-3309-4a42-c281-aa007a3b4022"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]}]},{"cell_type":"code","source":["import chardet\n","with open(\"/content/drive/MyDrive/Xccelerate/ML Project/Online Payments Fraud Detection Dataset.csv\",'rb') as rawdata:\n","  result=chardet.detect(rawdata.read(100000))\n","result"],"metadata":{"id":"DxonqEtdjEuv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755979219,"user_tz":-480,"elapsed":1447,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b5f6c2cd-62cb-40e3-99b5-9a8afc8dc148"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'confidence': 1.0, 'encoding': 'ascii', 'language': ''}"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/MyDrive/Xccelerate/ML Project/Online Payments Fraud Detection Dataset.csv\", encoding='ISO-8859-1')"],"metadata":{"id":"_-4ai-E9jSUN","executionInfo":{"status":"ok","timestamp":1653755993379,"user_tz":-480,"elapsed":14164,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["df.head(5)"],"metadata":{"id":"i5wXRlZxjSXG","colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"status":"ok","timestamp":1653755993380,"user_tz":-480,"elapsed":43,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"d8c0c57d-0274-4a8e-d382-e890ad33bdd9"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n","0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n","1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n","2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n","3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n","4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n","\n","      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n","0  M1979787155             0.0             0.0        0               0  \n","1  M2044282225             0.0             0.0        0               0  \n","2   C553264065             0.0             0.0        1               0  \n","3    C38997010         21182.0             0.0        1               0  \n","4  M1230701703             0.0             0.0        0               0  "],"text/html":["\n","  <div id=\"df-7823d27b-6534-4d05-92eb-000bcf8e6a88\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>type</th>\n","      <th>amount</th>\n","      <th>nameOrig</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>nameDest</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>9839.64</td>\n","      <td>C1231006815</td>\n","      <td>170136.0</td>\n","      <td>160296.36</td>\n","      <td>M1979787155</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>1864.28</td>\n","      <td>C1666544295</td>\n","      <td>21249.0</td>\n","      <td>19384.72</td>\n","      <td>M2044282225</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>TRANSFER</td>\n","      <td>181.00</td>\n","      <td>C1305486145</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C553264065</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>CASH_OUT</td>\n","      <td>181.00</td>\n","      <td>C840083671</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>C38997010</td>\n","      <td>21182.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>PAYMENT</td>\n","      <td>11668.14</td>\n","      <td>C2048537720</td>\n","      <td>41554.0</td>\n","      <td>29885.86</td>\n","      <td>M1230701703</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7823d27b-6534-4d05-92eb-000bcf8e6a88')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-7823d27b-6534-4d05-92eb-000bcf8e6a88 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7823d27b-6534-4d05-92eb-000bcf8e6a88');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["df.drop(['nameOrig','nameDest','type'],axis='columns',inplace=True)"],"metadata":{"id":"UtNUE5A-jSaI","executionInfo":{"status":"ok","timestamp":1653755993382,"user_tz":-480,"elapsed":40,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","DATA SET SAMPLE SIZE: 3000000 / \n","\"\"\"\n","df=df.iloc[:10000,:] "],"metadata":{"id":"Yrt8X9M0jSc_","executionInfo":{"status":"ok","timestamp":1653755993383,"user_tz":-480,"elapsed":40,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["df.shape"],"metadata":{"id":"nV8si2xPjSfd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755993384,"user_tz":-480,"elapsed":40,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"d88e8217-6ce9-42e1-f03e-33bee50a16ac"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(10000, 8)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df.isFraud.value_counts()/len(df)*100"],"metadata":{"id":"KF3mdL6SjShy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755993385,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"1499c17e-fd98-48a3-c8fe-2bdd2c8d2fd8"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    99.32\n","1     0.68\n","Name: isFraud, dtype: float64"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# The data is highly imbalanced."],"metadata":{"id":"7gy1x0rPjSkX","executionInfo":{"status":"ok","timestamp":1653755993386,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["## Correlation\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","#get correlations of each features in dataset\n","corrmat = df.corr()\n","top_corr_features = corrmat.index\n","plt.figure(figsize=(10,10))\n","#plot heat map\n","g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap=\"Greens\")"],"metadata":{"id":"jcfl9SpojSm4","colab":{"base_uri":"https://localhost:8080/","height":669},"executionInfo":{"status":"ok","timestamp":1653755994483,"user_tz":-480,"elapsed":1123,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e4f04e9c-5dbd-4e9f-aeda-4cafcdbb4622"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"S1MZmqNDzJWq","executionInfo":{"status":"ok","timestamp":1653755994485,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"12fe35f0-872b-4b64-c610-56bf0d0d1bbb"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","0     1   9839.64       170136.0       160296.36             0.0   \n","1     1   1864.28        21249.0        19384.72             0.0   \n","2     1    181.00          181.0            0.00             0.0   \n","3     1    181.00          181.0            0.00         21182.0   \n","4     1  11668.14        41554.0        29885.86             0.0   \n","\n","   newbalanceDest  isFraud  isFlaggedFraud  \n","0             0.0        0               0  \n","1             0.0        0               0  \n","2             0.0        1               0  \n","3             0.0        1               0  \n","4             0.0        0               0  "],"text/html":["\n","  <div id=\"df-001706db-38f1-4036-9b3a-5feb38d31e10\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>9839.64</td>\n","      <td>170136.0</td>\n","      <td>160296.36</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1864.28</td>\n","      <td>21249.0</td>\n","      <td>19384.72</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>181.00</td>\n","      <td>181.0</td>\n","      <td>0.00</td>\n","      <td>21182.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>11668.14</td>\n","      <td>41554.0</td>\n","      <td>29885.86</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-001706db-38f1-4036-9b3a-5feb38d31e10')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-001706db-38f1-4036-9b3a-5feb38d31e10 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-001706db-38f1-4036-9b3a-5feb38d31e10');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["#Get the Independent and Dependent Features\n","X=df.iloc[:,0:6]\n","Y=df.iloc[:,6]"],"metadata":{"id":"LstfLvNZjSpo","executionInfo":{"status":"ok","timestamp":1653755994486,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["Y"],"metadata":{"id":"l8B1StYbjSsI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755994487,"user_tz":-480,"elapsed":38,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"93af647c-e286-4c25-a12d-872b98537e7f"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       0\n","1       0\n","2       1\n","3       1\n","4       0\n","       ..\n","9995    0\n","9996    0\n","9997    0\n","9998    0\n","9999    0\n","Name: isFraud, Length: 10000, dtype: int64"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["############################################# 2. ###################################################\n","# (Train Test Split / Feature Scaling)"],"metadata":{"id":"oHTMgwYGjS5Z","executionInfo":{"status":"ok","timestamp":1653755994489,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["#Train Test Split\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)"],"metadata":{"id":"O1ExAQ1WjS8u","executionInfo":{"status":"ok","timestamp":1653755994492,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["len(X_train)"],"metadata":{"id":"QIxw9LHejS-u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755994493,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"62a240b1-9fe5-42e9-98b4-6e5497a3e40f"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8000"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["len(X_test)"],"metadata":{"id":"-6hEGlPvjTBg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755994494,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"317901b1-9863-4af0-fdf3-915dfacb362c"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2000"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#Feature Scaling\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X_train = sc.fit_transform(X_train)\n","X_test = sc.transform(X_test)"],"metadata":{"id":"4uogeeqGjTEe","executionInfo":{"status":"ok","timestamp":1653755994495,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["############################################# 3.1 ###################################################\n","# (Knn)"],"metadata":{"id":"EphNLGZcjTHd","executionInfo":{"status":"ok","timestamp":1653755994496,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#Call the kNN Classifier\n","from sklearn.neighbors import KNeighborsClassifier\n","#Initiating the classifier\n","classifier_kn = KNeighborsClassifier()\n","#Passing the data to the classifier\n","classifier_kn.fit(X_train, y_train)"],"metadata":{"id":"zTPyrqsPjTKJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995149,"user_tz":-480,"elapsed":679,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"27039264-0a7b-4999-e0fb-4e4829cad21a"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_kn = classifier_kn.predict(X_test)"],"metadata":{"id":"J4pdj0bojTM3","executionInfo":{"status":"ok","timestamp":1653755995153,"user_tz":-480,"elapsed":73,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_kn = confusion_matrix(y_test, y_pred_kn)\n","print('Confusion Matrix')\n","print(result)"],"metadata":{"id":"8EdeRP2TjTQS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995153,"user_tz":-480,"elapsed":73,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"aba10931-1d27-4c1b-ccab-99d8d5887634"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\n"]}]},{"cell_type":"code","source":["result1_kn = classification_report(y_test, y_pred_kn)\n","print('Classification Report')\n","print(result1_kn)"],"metadata":{"id":"Sav3-orAjTTC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995154,"user_tz":-480,"elapsed":69,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2a6a67ab-9422-4550-bf6b-5fb27979bc6a"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00      1986\n","           1       0.00      0.00      0.00        14\n","\n","    accuracy                           0.99      2000\n","   macro avg       0.50      0.50      0.50      2000\n","weighted avg       0.99      0.99      0.99      2000\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]},{"cell_type":"code","source":["result2_kn = accuracy_score(y_test, y_pred_kn)\n","print('Accuracy: ', result2_kn)"],"metadata":{"id":"pvul1mUpjTWg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995154,"user_tz":-480,"elapsed":64,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f778ef30-fc86-4cb2-feaf-968a7f5fa9f9"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.993\n"]}]},{"cell_type":"code","source":["############################################# 3.2 ###################################################\n","# (Decision Tree)"],"metadata":{"id":"-elv7iMsjTgV","executionInfo":{"status":"ok","timestamp":1653755995155,"user_tz":-480,"elapsed":60,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["#Call the Decision Tree Classifier\n","from sklearn.tree import DecisionTreeClassifier\n","#Initiating the classifier\n","classifier_dt = DecisionTreeClassifier()\n","#Passing the data to the classifier\n","classifier_dt.fit(X_train, y_train)"],"metadata":{"id":"bPXfv2dzsbkI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995155,"user_tz":-480,"elapsed":59,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2ffbcf83-d02d-4786-cc01-97ffcc64354e"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier()"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_dt = classifier_dt.predict(X_test)"],"metadata":{"id":"Kr4tvOpIsbnI","executionInfo":{"status":"ok","timestamp":1653755995156,"user_tz":-480,"elapsed":55,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_dt = confusion_matrix(y_test, y_pred_dt)\n","print('Confusion Matrix')\n","print(result_dt)"],"metadata":{"id":"91xpox0ssbp3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995156,"user_tz":-480,"elapsed":55,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"8eea1357-ac0f-4e90-e142-ae3abc8ff733"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1985    1]\n"," [   5    9]]\n"]}]},{"cell_type":"code","source":["result1_dt = classification_report(y_test, y_pred_dt)\n","print('Classification Report')\n","print(result1_dt)"],"metadata":{"id":"kF2sZHaJsbsx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995159,"user_tz":-480,"elapsed":50,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b5da4051-b138-4f42-e923-1e65f1401706"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      1986\n","           1       0.90      0.64      0.75        14\n","\n","    accuracy                           1.00      2000\n","   macro avg       0.95      0.82      0.87      2000\n","weighted avg       1.00      1.00      1.00      2000\n","\n"]}]},{"cell_type":"code","source":["result2_dt = accuracy_score(y_test, y_pred_dt)\n","print('Accuracy: ', result2_dt)"],"metadata":{"id":"z280jeJQsbvS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995159,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"330d564e-57fa-4a96-b939-a4d87d3960a3"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.997\n"]}]},{"cell_type":"code","source":["############################################# 3.3 ###################################################\n","# (Naive Bayes)"],"metadata":{"id":"eukjpAxkk8pi","executionInfo":{"status":"ok","timestamp":1653755995160,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# Naive Bayes\n","from sklearn.naive_bayes import GaussianNB\n","classifier_nb = GaussianNB()\n","classifier_nb.fit(X_train, y_train)"],"metadata":{"id":"1zvXiPs1spMA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995161,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"8fac368c-30f0-46f9-c1e6-51b1fb9162c9"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GaussianNB()"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_nb = classifier_nb.predict(X_test)"],"metadata":{"id":"vpyloVbOspQM","executionInfo":{"status":"ok","timestamp":1653755995161,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_nb = confusion_matrix(y_test, y_pred_nb)\n","print('Confusion Matrix')\n","print(result)"],"metadata":{"id":"wZL4R8wgspUM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995162,"user_tz":-480,"elapsed":35,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"23505e3c-ad33-4234-b231-37129423d88c"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}\n"]}]},{"cell_type":"code","source":["result1_nb = classification_report(y_test, y_pred_nb)\n","print('Classification Report')\n","print(result1_nb)"],"metadata":{"id":"Jh_qV93espYf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995162,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"934da312-045d-40fd-e19d-ee88e85c65ee"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       0.99      0.99      0.99      1986\n","           1       0.07      0.14      0.09        14\n","\n","    accuracy                           0.98      2000\n","   macro avg       0.53      0.56      0.54      2000\n","weighted avg       0.99      0.98      0.98      2000\n","\n"]}]},{"cell_type":"code","source":["result2_nb = accuracy_score(y_test, y_pred_nb)\n","print('Accuracy: ', result2_nb)"],"metadata":{"id":"U0ARzh-Wspc5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755995162,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"ec91124b-1989-4df7-d1b2-c4fd033a514b"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.9805\n"]}]},{"cell_type":"code","source":["############################################# 3.4 ###################################################\n","# (XGBoost) "],"metadata":{"id":"xiEJnHHgk8tL","executionInfo":{"status":"ok","timestamp":1653755995163,"user_tz":-480,"elapsed":22,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["classifier_xgb=xgboost.XGBClassifier()\n","classifier_xgb.fit(X_train,y_train)"],"metadata":{"id":"_D9o_coetLIi","executionInfo":{"status":"ok","timestamp":1653755995693,"user_tz":-480,"elapsed":551,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f4002120-b604-4088-957c-c17ac97c3a16"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier()"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["y_pred_xgb = classifier_xgb.predict(X_test)"],"metadata":{"id":"DAFfz4uZnp6r","executionInfo":{"status":"ok","timestamp":1653755995694,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["result_xgb = confusion_matrix(y_test, y_pred_xgb)\n","print('Confusion Matrix')\n","print(result_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FPkKz2bRoPna","executionInfo":{"status":"ok","timestamp":1653755995695,"user_tz":-480,"elapsed":31,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"78d1399f-968d-4c51-8337-31320e5ac51b"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1986    0]\n"," [  13    1]]\n"]}]},{"cell_type":"code","source":["result_xgb = classification_report(y_test, y_pred_xgb)\n","print('Classification Report')\n","print(result_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J3ZcI67lnsNk","executionInfo":{"status":"ok","timestamp":1653755995696,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6854b3b8-7ea3-4e84-87bd-dcbd76976986"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00      1986\n","           1       1.00      0.07      0.13        14\n","\n","    accuracy                           0.99      2000\n","   macro avg       1.00      0.54      0.57      2000\n","weighted avg       0.99      0.99      0.99      2000\n","\n"]}]},{"cell_type":"code","source":["print('Accuracy is ' ,round(accuracy_score(y_test, y_pred_xgb)*100,4), '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1utd9BawobCw","executionInfo":{"status":"ok","timestamp":1653755995697,"user_tz":-480,"elapsed":20,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"460e1b24-01db-4917-f563-837e8ae205ff"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy is  99.35 %\n"]}]},{"cell_type":"code","source":["############################################# 3.5 ###################################################\n","# (Random Forest / ROC AUC)"],"metadata":{"id":"PEn8nHWmlA8Y","executionInfo":{"status":"ok","timestamp":1653755995697,"user_tz":-480,"elapsed":14,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# Fitting RFClassifier to the Training set\n","from sklearn.ensemble import RandomForestClassifier\n","classifier_rf = RandomForestClassifier(n_estimators=10)\n","classifier_rf.fit(X_train, y_train)"],"metadata":{"id":"1jRkwqvtpjkQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755996065,"user_tz":-480,"elapsed":380,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0718693a-f092-4906-bcfb-e12a2c30afbe"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=10)"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_rf = classifier_rf.predict(X_test)"],"metadata":{"id":"QxTHqKtGpjoy","executionInfo":{"status":"ok","timestamp":1653755996065,"user_tz":-480,"elapsed":21,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_rf = confusion_matrix(y_test, y_pred_rf)\n","print('Confusion Matrix')\n","print(result_rf)"],"metadata":{"id":"tCVpg9yIpjtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755996066,"user_tz":-480,"elapsed":21,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3d52b1b7-73ef-4b05-877c-1e79e58e5f03"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1986    0]\n"," [  10    4]]\n"]}]},{"cell_type":"code","source":["result1_rf = classification_report(y_test, y_pred_rf)\n","print('Classification Report')\n","print(result1_rf)"],"metadata":{"id":"CORURAB0pjxz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755996066,"user_tz":-480,"elapsed":16,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6915c6d5-ca94-4258-ee0b-d90d793309d3"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00      1986\n","           1       1.00      0.29      0.44        14\n","\n","    accuracy                           0.99      2000\n","   macro avg       1.00      0.64      0.72      2000\n","weighted avg       1.00      0.99      0.99      2000\n","\n"]}]},{"cell_type":"code","source":["result2_rf = accuracy_score(y_test, y_pred_rf)\n","print('Accuracy: ', result2_rf)"],"metadata":{"id":"mxHxJjhEpj1U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755996067,"user_tz":-480,"elapsed":12,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a87d0d2e-15de-4148-803a-d5ca7d91b8d3"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.995\n"]}]},{"cell_type":"code","source":["############################################# 4. ################################################### "],"metadata":{"id":"r5_qopVgt-To","executionInfo":{"status":"ok","timestamp":1653755996067,"user_tz":-480,"elapsed":6,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["from sklearn import metrics\n","\n","# Random Forest\n","metrics.plot_roc_curve(classifier_rf, X_test, y_test)  \n","# K-nn\n","metrics.plot_roc_curve(classifier_kn, X_test, y_test) \n","# Decision Tree\n","metrics.plot_roc_curve(classifier_dt, X_test, y_test)\n","# Naive Bayes\n","metrics.plot_roc_curve(classifier_nb, X_test, y_test) \n","# XGB\n","metrics.plot_roc_curve(classifier_xgb, X_test, y_test)  \n","\n","plt.show() "],"metadata":{"id":"e0MtrsiEpj5p","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1653755997292,"user_tz":-480,"elapsed":1231,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"be2735f8-b414-4523-c903-5bb004d3bb36"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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ZmRkHDK/vLy83vt68skn9cwzz9SCggJVVS0oKNAFCxbUeZzDtWzZMp0wYUKDt695nmVlZXrsscdqWdnB/+3FixfrySefrAMHDtTKysrg/JSUFM3LywtOv//++3rOOeeoquqXX36pAwcO1LVr1waP88QTTzQ4zipjx47VZcuWaWVlpU6aNEkXL158yDr33Xef3n777aqqumPHDk1ISNDS0lJdt26drl+/XlVVt2zZor1799b8/HxVVV26dKleffXVYY8Z7v8KyNRarqtenyNo8bRldnJqU+75+2rWbC1s1H0O7xvLXed5HzajV69ezOjcuvUAABSuSURBVJs3j7Fjx3L33XdTWVnJzJkzWbp0KaWlpVx//fX87Gc/A+DBBx/kpZdeol27dkyePJkHHniA6dOnc+655zJ16lRmzpzJokWLaN++PWeeeSZz5szh7rvvpmvXrtx6662sWLGCa6+9luLiYgYNGsT8+fNJSEhg/PjxnHDCCbz//vvs2bOHP/3pT5x66qlh401NTeWSSy7h3//+N7fffjuJiYncddddlJaWMmjQIJ577jm6du1KVlYWN998M3v37qVHjx4sWLCAPn36cP/997N06VJiY2MBiI2N5corrzzkONdddx0ZGRns37+fqVOncs899wCEPcdXX32Ve+65h6ioKOLi4vjwww9ZunQpc+bMYf78+UybNo28vDzS0tL429/+xowZM5gzZw6BQIB//etfYeOveZ6XXnppMLb33nuPMWPG0L79wcvZwoUL+cUvfsGTTz7JsmXLOPnkkyN+9g899BB33nknw4YNA5w7xeuuu87jX05427Zto7CwkBNPPBGAK664gjfeeIPJkydXW09EKCoqQlXZu3cviYmJtG/fniFDhgTX6du3L7169SIvL4/4+HhOPfVUpk+fTnl5ebVzb4g2UxBUsRYCE8nAgQOpqKhgx44dvPnmm8TFxZGRkUFpaSmnnHIKZ555Jl999RVvvvkmn376KZ07d2b37uq1qLt27eL111/nq6++QkTYs2fPIce54ooreOyxxxg3bhyzZs3innvuYe7cuYBTtfHZZ5+xePFi7rnnnjqrm7p3787nn3/Ozp07ufDCC3nnnXfo0qULDz74II888gh33HEHN954I2+++SY9e/bklVde4c4772Tu3LkUFRUxcODAiO/JfffdR2JiIhUVFUyYMIGVK1eSlJQU9hxnz57NkiVLSEpKOuS8e/XqxbPPPsucOXN46623qi3buXMn99577yHxz5o1q9p51vTxxx+Tnp4enC4pKeGdd97h6aefZs+ePSxcuNBTQbBq1SpPVUHvv/8+v/rVrw6Z37lzZ/773/9Wm7dlyxb69esXnO7Xrx9btmw5ZNsbbriB888/n759+1JUVMQrr7xCu3bVa+4/++wzDhw4wKBBgwBo164dRx99NF988UW182+INlcQmCNXfb65N5V//etfrFy5ktdeew1w6nK//vpr3nnnHa666io6d+4MQGJiYrXt4uLiiImJYcaMGZx77rnV6qGr9rNnzx7GjRsHwJVXXskPf/jD4PILL7wQgPT0dLKzs+uM8ZJLLgHgk08+Yc2aNZxyipMa7MCBA5x00kmsW7eOVatWMXHiRAAqKiro06dPvd6Hv/71r8ybN4/y8nK2bdvGmjVrGD58eNhzPOWUU5g+fToXX3xx8Dy8qC3+mudZ07Zt2zjmmGOC02+99RannXYanTp14qKLLuK3v/0tc+fOJSoqKmxnkfp2IDnttNNYsWJFvbaJpKoN6L333uObb75h4sSJnHrqqcE7tW3btnH55Zfz/PPPVysgevXqxdatW4/sgkBEJgF/wHkw7VlVfaDG8o7AC0A6TgqLS1Q1249YrPuo8Wrjxo1ERUXRq1cvVJXHHnuMs846q9o6S5YsqXMf7du357PPPuPdd9/ltdde449//CPvvfee5xg6duwIONUT5eXlda7bpUsXwGnvmzhxIgsXLqy2/Msvv2TEiBEsW7bskG27du3Kxo0b67wr+Pbbb5kzZw4ZGRkkJCQwffp0SkpKaj3Hp556ik8//ZR//OMfpKenk5WV5emca4u/5nnW1KlTp2pPpi9cuJD//Oc/pKamAs7d2XvvvcfEiRPp3r07+fn59OjRA4Ddu3cHX48YMYKsrCxGjRpVZ5z1uSNISkoiNzc3OJ2bm0tSUtIh2z733HPMnDkTEeHoo49mwIABfPXVVxx//PEUFhZyzjnncN999wWrmKqUlJTQqVOnOuP1okEjlHnhpq9+HJgMDAcuE5HhNVabAeSr6tHA74EH/YrnYFx+H8G0ZHl5eVx77bXccMMNiAhnnXUWTz75JGVlZQCsX7+effv2MXHiRJ577jmKi4sBDqka2rt3LwUFBZx99tn8/ve/54svvqi2PC4ujoSEBD766CMAXnzxxeDdQUOdeOKJfPzxx2zYsAGAffv2sX79eoYOHUpeXl6wICgrK2P16tUA3HHHHVx//fUUFhYG467Zq6mwsJAuXboQFxfH9u3befvtt+s8x2+++YYTTjiB2bNn07NnTzZv3nxY8UdyzDHHBLcpLCzko48+YtOmTWRnZ5Odnc3jjz8eLFzGjx/Piy++CDh3Ri+99BKnnXYaALfddhv3339/8JiVlZU89dRThxyv6o6g5k/NQgCgT58+xMbG8sknn6CqvPDCC0yZMuWQ9ZKTk3n33XcB2L59O+vWrWPgwIEcOHCACy64gCuuuIKpU6cest369esZOXJkxPcoEj/vCI4HNqjqRgAReRmYAoT2E5sC3O2+fg34o4iI28JtTJPYv38/aWlplJWV0b59ey6//HJuvtkZlO/qq68mOzubMWPGoKr07NmTN954g0mTJrFixQoCgQAdOnTg7LPP5v777w/us6ioiClTplBSUoKq8sgjjxxy3Oeffz7YWDxw4MBgl8GG6tmzJwsWLOCyyy6jtLQUgHvvvZchQ4bw2muvcdNNN1FQUEB5eTm//OUvGTFiBNdddx179+5l7NixREdHEx0dfUg9+ahRoxg9ejTDhg2jf//+waqb2s7xtttu4+uvv0ZVmTBhAqNGjeKDDz44rPjrMnnyZC6//HIAXn/9dU4//fTgHRXAlClTuP322yktLeU3v/kN1113HaNGjUJVmTRpEtOmTQPguOOOY+7cuVx22WUUFxcjIodU6TXEE088wfTp09m/fz+TJ08ONhRXFTLXXnstv/nNb5g+fTrHHnssqsqDDz5Ijx49eOmll/jwww/ZtWsXCxYsAGDBggWkpaWxfft2OnXqRO/evQ87RvHrmisiU4FJqnq1O305cIKq3hCyzip3nVx3+ht3nZ019nUNcA1AcnJyek5OTr3j+fea7byxfAsPXzyKmOiohp6WaWRr166tVr9rTENccMEFPPTQQwwePLi5Q2kyv//974mNjWXGjBmHLAv3fyUiWaoaCLcv36qGGpOqzlPVgKoGevbs2aB9TBx+FI//eIwVAsa0Qg888ADbtm1r7jCaVHx8fNiuvg3hZ9XQFqB/yHQ/d164dXJFpD0Qh9NobIwxng0dOpShQ4c2dxhN6qqrrmq0ffl5R5ABDBaRASLSAbgUWFRjnUVAVZE2FXjP2gfaHvvIjWk8Dfl/8q0gUNVy4AZgCbAW+KuqrhaR2SJyvrvan4DuIrIBuBmYGX5vprWKiYlh165dVhgY0wjUHY8gJiamXtv51ljsl0AgoI2VCMs0PxuhzJjGVdsIZXU1FtuTxaZZRUdH12skJWNM42sRvYaMMcb4xwoCY4xp46wgMMaYNq7FNRaLSB5Q/0eLHT2AnRHXal3snNsGO+e24XDOOUVVwz6R2+IKgsMhIpm1tZq3VnbObYOdc9vg1zlb1ZAxxrRxVhAYY0wb19YKgnnNHUAzsHNuG+yc2wZfzrlNtREYY4w5VFu7IzDGGFODFQTGGNPGtcqCQEQmicg6EdkgIodkNBWRjiLyirv8UxFJbfooG5eHc75ZRNaIyEoReVdEUpojzsYU6ZxD1rtIRFREWnxXQy/nLCIXu5/1ahH5S1PH2Ng8/G0ni8j7IrLc/fs+uznibCwiMl9EdrgjOIZbLiLyqPt+rBSRMYd9UFVtVT9AFPANMBDoAHwBDK+xzs+Bp9zXlwKvNHfcTXDOpwGd3dfXtYVzdtfrBnwIfAIEmjvuJvicBwPLgQR3uldzx90E5zwPuM59PRzIbu64D/Ocvw+MAVbVsvxs4G1AgBOBTw/3mK3xjuB4YIOqblTVA8DLwJQa60wBnndfvwZMEBFpwhgbW8RzVtX3VbXYnfwEZ8S4lszL5wzwW+BBoDXkufZyzj8FHlfVfABV3dHEMTY2L+esQKz7Og7Y2oTxNTpV/RDYXccqU4AX1PEJEC8ifQ7nmK2xIEgCNodM57rzwq6jzgA6BUD3JonOH17OOdQMnG8ULVnEc3Zvmfur6j+aMjAfefmchwBDRORjEflERCY1WXT+8HLOdwPTRCQXWAzc2DShNZv6/r9HZOMRtDEiMg0IAOOaOxY/iUg74BFgejOH0tTa41QPjce56/tQRI5V1T3NGpW/LgMWqOrDInIS8KKIjFTVyuYOrKVojXcEW4D+IdP93Hlh1xGR9ji3k7uaJDp/eDlnROQM4E7gfFUtbaLY/BLpnLsBI4GlIpKNU5e6qIU3GHv5nHOBRapapqrfAutxCoaWyss5zwD+CqCqy4AYnORsrZWn//f6aI0FQQYwWEQGiEgHnMbgRTXWWQRc6b6eCrynbitMCxXxnEVkNPA0TiHQ0uuNIcI5q2qBqvZQ1VRVTcVpFzlfVVvyOKde/rbfwLkbQER64FQVbWzKIBuZl3PeBEwAEJFjcAqCvCaNsmktAq5wew+dCBSo6rbD2WGrqxpS1XIRuQFYgtPjYL6qrhaR2UCmqi4C/oRz+7gBp1Hm0uaL+PB5POffAV2BV9128U2qen6zBX2YPJ5zq+LxnJcAZ4rIGqACuE1VW+zdrsdzvgV4RkR+hdNwPL0lf7ETkYU4hXkPt93jLiAaQFWfwmkHORvYABQDVx32MVvw+2WMMaYRtMaqIWOMMfVgBYExxrRxVhAYY0wbZwWBMca0cVYQGGNMG2cFQRsgIhUisiLkJ7WOdfc2wvEWiMi37rE+d5/2rO8+nhWR4e7r/62x7L+HG6O7n6r3ZZWI/F1E4iOsn9aQzJYi0kdE3nJfjxeRAve4a0Xkrgbs7/yqLJwi8oOq98mdnu0+OHhY3M9waoR1ltbnAT333N/ysF7Y7JsiMkdETvd6POOdFQRtw35VTQv5yW6CY96mqmnATJwH2epFVa9W1TXu5P/WWHZyI8QHB9+XkTjPk1wfYf00nP7b9XUz8EzI9EfuexPAyZFTrzTCqrpIVR9wJ3+Ak3GzatksVX2nATEeSRYA4XIkPYbz92QamRUEbZCIdBVnTILPReRLETkka6f7LfbDkG/Mp7rzzxSRZe62r4pI1wiH+xA42t32Zndfq0Tkl+68LiLyDxH5wp1/iTt/qYgEROQBoJMbx5/dZXvd3y+LyDkhMS8QkakiEiUivxORDHHytf/Mw9uyDDdxl4gc757jchH5r4gMdZ9qnQ1c4sZyiRv7fBH5zF03XPZTgIuAf9acqar7gCzgaPdu4xM33tdFJMGN5SY5OI7Ey+686SLyRxE5GTgf+J0b06CQ92CSiLwa8t4Ev43X9zMUkVnue7lKROaJVMvUe3nI38jx7vpe35ewasu+qao5QHcR6V2f/RkPmiPftv007Q/OE6Yr3J/XcZ4oj3WX9cB5QrHq4cK97u9bgDvd11E4uXt64FzYu7jz/weYFeZ4C4Cp7usfAp8C6cCXQBecJ5xXA6NxLpLPhGwb5/5eijt+QFVMIetUxXgB8Lz7ugNORsZOwDXAr935HYFMYECYOPeGnN+rwCR3OhZo774+A/ib+3o68MeQ7e8Hprmv43Hy+nSpcYwBQFbI9HjgLfd1dyAbGAGsBMa582cDc93XW4GOVceoGUfoex067X7Gm0I+qyeBaQ38DBND5r8InBfyGT3jvv4+bv782t6XGuceAJ6t4282lTD5+HHurC5q7v+p1vbT6lJMmLD2q1MVAYCIRAP3i8j3gUqcb8JHAd+FbJMBzHfXfUNVV4jIOJxqiI/dL4UdcL5Jh/M7Efk1Ts6XGTi5YF5X51swIvL/gFNxvik/LCIP4lwkPqrHeb0N/EFEOuJUJXyoqvtF5EzguJA67jicxGvf1ti+k4iscM9/LfDvkPWfF5HBOCkLoms5/pnA+SJyqzsdAyS7+6rSh0Pz3pwqIstx3vsHcBLFxavqB+7y53EKJnAKiD+LyBs4eYQ8USc1wz+B80TkNeAc4HacrLNeP8Mqp4nI7UBnIBGnEP+7u2yhe7wPRSRWnHaW2t6X0Pgygau9nk+IHUDfBmxn6mAFQdv0Y6AnkK6qZeJk54wJXcH9x/4+zgVkgYg8AuQD/1bVyzwc4zZVfa1qQkQmhFtJVde7deRnA/eKyLuqOtvLSahqiYgsBc4CLsEZtASckZtuVNUlEXaxX1XTRKQzTi6b64FHcQazeV9VLxCnYX1pLdsLzrfTdXUdgxrvLU4bwbnBnYjE1bH9OTjfts8D7hSRY+tYt6aXgRtwqlkyVbXIrdbx+hkiIjHAEzh3Z5tF5G6qn0/NHDVKLe+LiBxVj9hrE4PznppGZG0EbVMcsMMtBE4DDhm/WJwxjber6jPAszhD530CnCIiVXX+XURkiMdjfgT8QEQ6i0gXnGqdj0SkL1Csqi/hJMYL13Ba5t6ZhPMKTtKtqrsLcC7q11VtIyJD3GOGpc7IbTcBt8jBtORVaX2nh6xahFNFVmUJcGNVnbk4GV5rWo9TzVErVS0A8sVthwEuBz4QZ0yF/qr6Pk4VThxOtVqomjGF+gDn/fwpBwvJ+n6GVRf9nW5bQs2eRFVtOt/DyYJZgLf3paGGAGHH8jUNZwVB2/RnICAiXwJXAF+FWWc88IVbhXEJ8AdVzcO5MC4UkZU4VQrDvBxQVT/HqXf+DKfN4FlVXQ4cC3zmVtHcBdwbZvN5wEpxG4tr+BdOdcc76gxlCE7BtQb4XJwuiE8T4e7XjWUlziAnDwH/55576HbvA8OrGotx7hyi3dhWu9M197sP+KbqwluHK3Gq01bi9E6ajdN28ZL7OS0HHtVDB5h5GbjNbZQdVOPYFcBbwGT3N/X9DN3jPYNz8V2CU2UYqsR9n57CqQIED++LOB0Bng13THGyby4DhopIrojMcOdH43Q8aMmpxI9Iln3UGJ+JyAU41XC/bu5YWjL3fRyjqr9p7lhaG2sjMMZnqvq6iLTkMbGPFO2Bh5s7iNbI7giMMaaNszYCY4xp46wgMMaYNs4KAmOMaeOsIDDGmDbOCgJjjGnj/j8JB0cDi/7AgQAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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tcF7XLNmDR999BFbbrnlBtuef/55OnXqRM+ePWvXTZw4keOPP57nnnuOe+65h2OPPTbv+3zttdcyZswY9t1339p1Rx11VN7jGhMRPPTQQ9x2220AjBkzhosvvpgf/OAHDR4zceLE9UoyX/rSl+rdr3PnzvTv358ZM2YwdOjQZsVZNonAbQTWVs2dO5e99tqrwe1bb701DzzwAJWVlbzwwgscc8wx61WP1LV8+XLuuusu5s+fjyTee+89AMaNG8fUqVPp3bt37bpcX/jCF3jkkUdo3749f/vb37jgggv485+TsSlnz57NrFmz6NSpEwMHDuT000+nb9++AIwcOZLrrruOhQsXbnDOyZMn8+ijj7J06VJ23nlnDjvssA32eeyxxza4/8mTJ/PAAw8wf/58rr766kyJYM6cOYwZMybvfgsWLGDUqFH1bps2bRrdu3evXV6+fDndu3enffvko7ZPnz689tprjZ5/8uTJ3HPPPXnjgKRE9sgjjzgRZOVeQ1YMjX1zL5ZTTz2VRx99lI4dO/Lkk0+yevVqTjvtNGbPnk1FRQXPP/98o8d369aNyspKTjzxRA499FAOPfRQAPbff3/Gjh3LyJEj+Zd/+ZcNjluxYgVjxozhhRdeQBKrV6+u3XbggQfSrVs3AHbddVdeeeWV2kRQUVHBueeey29+8xsOPvjg9c45atQorrnmGiKCU089lcsuu4zzzz9/vX2WLl1Kr169aperq6vp2bMn/fr1o3fv3pxwwgm88847bLXVVvX2qGlqL5uBAwfW1t+3tCeeeILOnTuv127RmK233pr58+c3+7oFrSeRNELSAkkLJZ1fz/ZOkian25+Q1L9QsbiNwNqq3Xbbjaeeeqp2+dprr+XBBx+s7Ut+5ZVXss022/D0009TXV1d21jZvn171qUlZaD2yej27dszY8YMjjrqKO677z5GjBgBwPXXX88vf/lLFi9ezN57783y5cvXi+OnP/0pw4cPZ86cOdx7773rPWndqVOn2tcVFRWsWbNmvWOPP/54pk+fzuLFi+u9R0kcdthhTJ8+fYNtm2222XrXmjhxIvPnz6d///7ssMMOvP/++7Ulkx49evDuu+/W7vvOO+/UVinttttuzJw5s97r51qwYMF6Dbu5P3VLSj169OC9996rvd8lS5bQu3fvBs89adIkjjnmmLwx1KiphmuugiWC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\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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TImjjz46IpLXrEuXLrFgwYKy49x66601jrPUiy++GO+99160bNmy0jLz5s2L3r17x9q1a2Px4sXRpUuX2LBhQ2zYsCG6dOkSb7/9dqxbty569+4d8+bNi4iIqVOnxmmnnVbh/ir6ewVmRiWfq1mfIzCz1JWPzmP+ex/X6j57fqs1lx9T9fAe5557Lv369WPUqFE899xz3HzzzQDcf//99O/fn2OPPbasbK9evejVq9cm+9iwYQOfffYZ3/jGNwC4+uqrmTp1Kq1btwagdevW/OAHP9hkuzPOOIMZM2bw+eefM3jwYK688koALr74YiZOnEjTpk05/PDDGTlyJA899BBXXnklTZo0oU2bNkybNo2pU6cycuRIxo4dy/Dhw1m5ciV9+vThD3/4A6eeeiojR46kpKSEv/zlL1x++eWsW7eOXXbZhbvvvptWrVrRqVMnTjzxRJ588kkuuugihg4dWhbbM888Q9++fWna9F8fZ+PHj+enP/0pt912Gy+++CL7779/3vfguuuu45JLLmG33XYDoEmTJpxxxhl5t8tnv/32y1vmkUceYejQoWy11VZ07tyZrl278vLLLwPQtWtXunTpAiRXAY888gg9e/bkwAMP5JRTTmHDhg0bnXtNOBGY1RPNmjXj+uuvZ+DAgfzlL38pu0983rx59O3bt8ptH3jgAZ577jlWrFjBrrvuyjHHHMPHH3/MJ598UvYhU5Vf/vKXbLfddnz55ZcccsghzJkzh3bt2vHwww/zxhtvIIl//vOfAIwYMYLJkyfTrl27smWldtxxR+68805GjhzJpEmTNlr3wQcfcNVVV/HUU0/RsmVLrr32Wm644QYuu+wyALbffnteeeWVTWJ7/vnn6devX9n82rVreeqpp7j99tv55z//yfjx4zMlgrlz52aqCpoyZQrnnnvuJsu33nprXnjhhbzbV2T58uUbJYz27duzfPlyADp06LDR8pdeegmALbbYgq5du/Laa69tdP414URgVk35vrkX0uOPP85OO+3E3LlzOeywwyosc/zxx7Nw4UJ23XVX/vjH5OH/E088kZtvvpmI4KyzzuL666/nzDOzjy314IMPMmbMGDZs2MCKFSuYP38+PXv2pHnz5px66qkMGjSorK79gAMO4JRTTmHIkCF8//vfz3yM6dOnM3/+fA44IOna7IsvvqB///5l60888cQKt1uxYgU9evQom580aRIDBgygRYsWnHDCCfziF79g1KhRNGnSpMI7aqp7l82AAQOYPXt2tbYplB133JH33ntvsxNBjQamyUrSQElvSlok6eIK1m8l6YF0/UuSOhUyHrP6bPbs2Tz55JNMnz6dG2+8kRUrVgCw++67b/RN+eGHH2bcuHFlDcu5JHHMMccwbdo0WrduTatWrVi8eHGVx33nnXcYOXIkTz/9NHPmzOHoo49m7dq1NG3alJdffpnBgwczadIkBg4cCMDo0aO56qqrWLp0Kf369WPVqlWZzi8iOOyww5g9ezazZ89m/vz53HXXXWXrW7ZsWeF2LVq02OiJ7/Hjx/PUU0/RqVOnsuM/88wzQHJV8dFHH5WV/fDDD9lhhx2A5HWcNWtW3jinTJlCnz59NvnJctVRmXbt2rF06dKy+WXLltGuXbtKl5dau3YtLVq0qPFxSxUsEaTdV98CHAn0BIZJ6lmu2KnARxHRFbgRuLZQ8ZjVZxHBGWecwahRo+jYsSMXXnghF1yQ9Ax/0kkn8fzzzzNx4sSy8rl3BZX33HPPscsuuwDws5/9jLPOOouPP07aPD799NON7r4B+Pjjj2nZsiVt2rThH//4B48//nhZ2dWrV3PUUUdx44038tprrwHw9ttvs++++zJixAjatm270QdZVfbbbz+ef/55Fi1aBMBnn33GW2+9lXe7Hj16lG3z8ccf89e//pV3332XJUuWsGTJEm655RbGjx8PJHdC3XvvvQB8+eWX3HfffQwYMACACy+8kKuvvrrsmF999RWjR4/e5HilVwTlf2paLQRw7LHHMmHCBNatW8c777zDwoUL2Weffdh7771ZuHAh77zzDl988QUTJkzYqC3orbfeqrAtqLoKeUWwD7AoIhZHxBfABOC4cmWOA+5Jp38PHCI/tWO2iTvuuIOOHTuWVQedeeaZLFiwgGeffZYWLVowadIkRo8eTZcuXejfvz9XXXUVl156adn2DzzwAH369KF37968+uqr/PznPweSRuABAwaw995706tXLw488EC22GLjj4U999yTvfbai912242TTjqprOrmk08+YdCgQfTu3Ztvf/vb3HDDDUDygbrHHnvQq1cv9t9/f/bcc89M59i2bVvGjRvHsGHD6N27N/379+eNN97Iu92RRx5Zdqvsww8/zHe/+1222mqrsvXHHXcc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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["classifiers_all = [classifier_rf,classifier_kn,classifier_dt,classifier_nb,classifier_xgb]\n","ax = plt.gca()\n","for i in classifiers_all:\n","    metrics.plot_roc_curve(i, X_test, y_test, ax=ax)"],"metadata":{"id":"ZS82PTZ_lA_C","colab":{"base_uri":"https://localhost:8080/","height":473},"executionInfo":{"status":"ok","timestamp":1653755997293,"user_tz":-480,"elapsed":22,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"fe95ae27-cd3a-49b2-e55f-3dd77de602e5"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_roc_curve is deprecated; Function :func:`plot_roc_curve` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: :meth:`sklearn.metric.RocCurveDisplay.from_predictions` or :meth:`sklearn.metric.RocCurveDisplay.from_estimator`.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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euklQJOi7tOnDzNnziQhIYFjx44xe/ZsEhIS6NevHy+++CKg6fG/8cYbhISEAJpcw6xZs6q809y5cxk4cCDx8fE88sgj+v758+cTFxdH//79uffee3X7ExISSExM5KKLLgLO9byzsrKYMWMGmzdvxmAwcODAAbuRx3fffcfQoUNJTk7mmmuuobCwUP/d3X///SQnJ9tJdAD88MMPJCcn6ytqQZOLuPvuu+natSubNm2q7p+2Cs8995xT0tp14eTJk+Tn53PBBRcghGDmzJksX7681mvKFVDLyczM5Ouvv66y6G3EiBGsW7euQXpWjYGjrKGJtu8WWZayRtQcQavBaDRyxRVXsGHDBjt5BNBCQTfddBMvv/yynVPevXs3y5YtY+PGjXh7e3P77bfz4Ycf2sklbN68mc8//5zt27djMplITk62kzE2m8388ccfrF69mkcffZR169YBWh2EtLQ0AgICGDRoEBMmTEAIwZIlS/j999+RUjJkyBAuvvhi2rRpQ0ZGBu+++y4XXHABW7du5fjx47r+zdmzZ8nPz6egoIAeTmSQPfnkk4SHh2OxWBg9ejQ7duygU6dOfPnll+zZswchhB72KpeY7tSpU5VQWFRUFG+99RYLFy5k1apVdsdycnJ44oknWLduHYGBgTz77LO88MILejWttm3bsm3btiq2bdy40e73V1payrp16/jvf//L2bNn+fjjj50q2JOWluZUKGj9+vX84x//qLI/ICCgSoW448eP28lpd+7cmePHj9d47+LiYtasWcN//vMffd/f//53nnvuOTutJ9DEB3v16sX27dudksF2Fc4Wrx8OpEopi4QQM4Bk4CUp5VGXWucq1Iig6RlftTJTU+Dt7c2wYcN4++23q9XrueuuuzAYDHpPGLQw0tatW/VFOyUlJVVUIzdu3MiUKVPw8/PDz8/PrqAJoCtGDhgwgMOHD+v7x4wZQ9u2bfVzfvnlF4QQTJ06VVfYvPLKK/n555+ZPHky3bp107VzevTowcGDB/nb3/7GhAkTGDt2rN7bdoZPP/2UxYsXYzabOXnyJOnp6cTFxeHn58fNN9/MxIkT9fh1fWWsf/vtN9LT0xk+fDgAZWVlDB06VD9euQZBOSdPnrQLm6xatYpRo0bh7+/PVVddxeOPP85LL72Ep6dno8hJjxo1qt5y0o746quvGD58uB4WWrVqFVFRUQwYMEAvUlORcjlpdzYEzqaPvgEUCyESgX8CB4D3XWaVCxHSCuYS8FWTxa0BDw8PPv30U/744w+eeuqpKsfDwsKYPn26XQlLKSWzZs3S47179+5lwYIFdXpuueRBZRnryg7LkQOrKL/cpk0btm/fzsiRI1m0aBG33HILISEhBAUFOSzJeOjQIRYuXMj333/Pjh07mDBhAqWlpXh5efHHH39w9dVXs2rVKsaNGwc4J2NdHVJKxowZo//u0tPT9UI2ld+nIpXlpD/++GPWrVtHdHS0/vxySevGkJNev359tVLS1Y06OnXqRGZmpr6dmZmpK9dWxyeffGIXFtq4cSMrV64kOjqa66+/nh9++IEZM87l2jSmnHR9cbYhMEtttmYK8B8p5WtoKaQtD5OtxqcaEbQaAgIC+Prrr3V1y8rcc889/Pe//9Ud9ujRo/nf//6nZxTl5uZy5MgRu2uGDx+u1zEoLCysEiKpibVr15Kbm0tJSQnLly9n+PDhjBgxguXLl1NcXExRURFffvlltbLTOTk5WK1WrrrqKp544gk9xPLAAw9wxx136HVuCwsLqxSEz8/PJzAwkNDQUE6dOsU333yjn5uXl8fll1/Oiy++WKuMtTNccMEFbNy4UZeGLioq0mWua6OinHR+fj4///wzR48e1eWkX3vtNb2uwMiRI3n/fa0farFY+OCDD3Q5aWeltctHBJU/lcNCoCnPhoSE8NtvvyGl5L333qtWThq0gkc//vij3fGnn36azMxMDh8+zCeffMIll1zCBx98oB9vTDnp+uJshbICIcQDwA3ACCGEB+DtOrNcgZZ1IMqKtE01R9CqCA8PZ82aNVx00UVVpIUjIiKYOnWqPvkaFxfHE088wdixY7FarXh7e/Paa6/p2Uagab1MnjyZ/v3765XHyqua1cbgwYO56qqryMzMZMaMGQwcqIlBzp49m8GDBwNwyy23kJSUZBdSAi1WfeONN+rZQ08//TSgTQIXFhYyaNAgvL298fb2rhInT0xMJCkpidjYWLp06aKHbgoKCpgyZQqlpaVIKfVSkPPmzSMjIwMpJaNHjyYxMZEff/zR4ftFRkaydOlSpk2bplcYe+KJJ+x09Ktj/Pjxul7Ql19+ySWXXGInJDdlyhTuu+8+jEYj//d//8fcuXNJTExESsm4ceP0HnZFae3i4mKEEHbpmvXl9ddfZ/bs2ZSUlDB+/HjGj9fW05Y3Mrfddptu+9ixY2sc+VTm1KlT+Pv70759+wbb2CCklA4/QHvgHmCEbbsrMNOZaxv7M2DAAFkfnntgpfzXvEXy6MFfpHwkRModn9XrPu4ib/Vqmd4nVpZmZLjbFKdJT093twkupaCgQEopZVFRkRwwYIDcunWrmy1q2VxxxRVy37597jajSXnhhRfkW2+91ej3re7/HrBF1uBXnRoRSCn/FEJ8CAwSQkwE/pBSvufouuaIMJWPCBoe2ZJSUnboMLK0pMH3ckRZhRilonkwZ84c0tPTKS0tZdasWSQnJ7vbpBbNM888w8mTJ52uc3w+EBYW1iyUU53NGroW+DewAS0V/1UhxDwp5f8cXDcOeBnwBN6SUj5T6fg9wC2AGa0e8k1SyiNVbtSYGG0NQSPMERRv3szRmVXztV2J8HPvpJLiHB99uXdItQAAIABJREFU9JHjkxRO06dPH/r06eNuM5qUG2+80d0mAM7PETwIDJJSZgEIISKBdUCNDYEQwhN4DU2wLhPYLIRYKaWsuA49BRgopSy26Ro9B1SfX9ZAytclnhsRNLwhsNpygqPm349Ply4Nvp8jPEND8elcc7aCQqFQ1AdnGwKP8kbAxmkcZxwNBvZLKQ8CCCE+Qcs60hsCKeX6Cuf/Brhcv0i4IGsocPBg/OqwvF6hUCiaE842BGuEEN8CH9u2rwNWO7imE1Ax5ywTGFLL+TcD31R3QAgxB5gD0LVrV2fsrRE9a0iljyoUCgXgZEMgpZwnhLgSuNC2a7GU8svGMsK2WnkgcHENz18MLAateH2DHtaIoSGFQqE4H6g1vCOEiBFCrBBCpAHXAM9LKe9xshE4DlQMnHe27av8jEvR5iAmSymNzptePzyMRSA8wDvA1Y9SNAM8PT0xGAzEx8eTmJjI888/X6OKpyMefvhhXTOoOhYtWlRlIZczfPvtt/rK1qCgIPr06YPBYLDTNqovSp7a/fLUeXl5TJo0icTEROLj41myZAmgKbcOHTqU+Ph4+vfvz7Jly/Rrmlyeuqa8UtsL/Qz8FegD3At8Udv5la71Ag4C3QEfYDsQX+mcJDS5ihhn71vfdQTP2tYR/Lnib1I+1ble96hM/rp1Mr1PrCzZtatR7ne+0RzWEQQGBuo/nzp1So4ePVo+/PDDbrSodi6++GK5efPmKvvNZnOd7/XGG2/IsWPHyry8PCmllHl5eXLp0qW1PqehbNq0SY4ePbre11d+T5PJJPv16ydNJpO+b/Xq1XLYsGGyR48e0mq16vu7desms7Oz9e3169fLCRMmSCml3Llzp+zRo4fcvXu3/pzXX3+93naWM2jQILlp0yZptVrluHHj5OrVq6uc8+STT8r77rtPSillVlaWbNOmjTQajXLv3r36uonjx4/L9u3byzNnzkgppdywYYO85ZZb6m1XY68jCJZSvmn7ea8QoqpsYM0NjFkIcSfwLVr66DtSyl1CiMdsBq1ES0kNAj6zaa4clVJOdvYZ9UGUFan5ATfw7B/Psid3T6PeMzY8lvsHO182OyoqisWLFzNo0CAWLFiA1Wpl/vz5bNiwAaPRyB133MGtt96q2fvss3zwwQd4eHgwfvx4nnnmGWbPns3EiRO5+uqrmT9/PitXrsTLy4uxY8eycOFCFixYQFBQEPfeey+pqancdtttFBcX07NnT9555x3atGnDyJEjGTJkCOvXr+fs2bO8/fbb1cpJgNbDve6661i7di333Xcf4eHhPPLIIxiNRnr27MmSJUsICgpi69at3HPPPRQWFhIREcHSpUvp0KEDTz31FBs2bHBKnnrz5s2UlJRw9dVX60qs1b3jZ599xqOPPoqnpyehoaH89NNPbNiwgYULF/LOO+8wY8YMsrOzMRgMfP7559x8880sXLiQgQMH8t1331Vrf+X3vP7663XbapOnfuONN9i0aZNTqqSulqcGdHnq8lXH5QghKCgoQEpJYWEh4eHheHl52a227tixI1FRUWRnZxMWFsaIESOYPXs2ZrPZ7t1dhaMn+AkhkrDJ+AP+FbellLU2DFLK1VSaVJZSPlzh50vrbHFDMRWr+YFWTI8ePbBYLGRlZbFixQpCQ0PZvHkzRqOR4cOHM3bsWPbs2cOKFSv4/fffCQgIqFKv4PTp09VKN1dk5sz/b+/M46uozv//fgj7jrKILCYhEnYCiVRogUZEUQSlIltFUKg/2bSoUAVxQUABK3wFhKqFpEAlFmURS5FVloIsBlkCGDaXklJACMqawPP7Y+aO9yb3JjfLTUjueb9e95U5M2fmPGcm9z5zts/zGDNmzKBjx468/PLLvPbaa06cAV8S1d5wyTafPn2a3/3ud5nknV988UVGjBjBsmXLqFGjBgkJCYwdO5bp06cbeWo3ClOeevjw4XTv3p1bb72Vn376iYSEBEqU8OyV3759O1evXnXiZRS0PHV2jiAFeNst/V+3tAJ3BcKoQGJaBIVDTt7cC4rPP/+cPXv2sHixtRwmNTWV5ORk1qxZw+OPP0758tY4knuUKYAqVap4lW52kZqayrlz5+jY0Zr7MGDAAB555BHnuC+Jam+4ZJt9yTsfOnSIffv20blzZ8ASYatdu3aO7oORp/6FQMhTu8aA1q1bx5EjR+jcuTPt27d3WmopKSn079+f+Ph4DwdRkPLU2QWmiQ24BQVN2gXTIghijh49SkhICDVr1kRVmTFjBvfee69HnlWrVmV5DZd089q1a1m8eDEzZ850JJL9wZdEtTdc4mVqyzu7FDhd7N27l6ZNm3qN4OWSp86qVeCSp96xYwfVqlVj4MCBHvLUGes4Z84cvvzySz777DOio6P9knzOyv6M9cyIN3nqzZs3ExoaCuDIU7viPJw9e9aRpPYmT92yZcss7cxJi8Bfeep58+bxwgsvICJEREQQFhbGwYMHadOmDefPn6dr165MnDjR6WJyUZDy1P7KUBcb5MoFE7g+SDl16hRPPfUUw4cPR0S49957mT17NmlpaYAlB3zhwgU6d+7MvHnzuHjRWnyYsWvIl3SziypVqlCtWjUnROX8+fOd1kFu8SXvHBkZyalTpxxHkJaWxv79+wEjT32jyFPXr1+ftWvXApba6KFDhwgPD+fq1av06NGDxx57jJ49e2Y6ryDlqQM/CnGDIaZFEFRcunSJqKgo0tLSKFmyJP379+fZZ58FLLnn48eP07p1a1SVGjVqsHTpUrp06cLu3buJiYmhdOnS3H///R5BbXxJN7sTHx/vDBaHh4c7UwZzS1byzosXL+bpp58mNTWV9PR0/vjHP9K0aVMjT32DyFOPGzeOgQMH0rx5c1SVyZMnU716dRYsWMDGjRs5c+YMcXFxAMTFxREVFVXg8tSiXua93sjExMRobuY/TxnzKefTTvDHSm9SNbIr3PN6nm25sHEjJ/70AmGffGwkJrxw4MABj/5dgyE39OjRgylTpgSVKum0adOoXLkygwYNytX53r57IrJLVWO85fdXfVSA3wPhqjpeROoDt6jq9lxZWSgoESeUU7vKcoq18Mra/Lt0AUzvMhiCFSNPHXj8/QV7F7iONUtoPPAT8DFwR4DsCgilrkGZWy9Ttf1vIaJTvlwzpHIlygTRP6jBUNAYeerA468j+JWqthaRRABVPSsipQNoV/5j94CVrpHGTfe1gTsDLnRqMBgMRQJ/Zw2l2fEFFJx4BLkTbCkkxOUJRM06AoPBYHDDX0fwDrAEqCkiE4HNwKSsT7nBcPmBEphZQwaDweCGvzLUC0VkF9AJS17iIVU9EFDL8hlxzY4SzDoCg8FgcMOvFoE9S+gi8CmwHLhg7ytySAk1LYIg4uTJk/Tr14/w8HCio6Np27YtS5bkWygNn7hLM+eG0NBQHn74YSe9ePFiBg4cCFhzzWvUqOHIa/fs2dNZ/JaRpUuXMn78eI99UVFRHsJukFmW+vjx4x6LmbZv306HDh2IjIykVatWDB482GeZ/nLs2DF+9atfERERQe/evbl69WqmPAsXLnQkuqOioihRooQjATF27Fjq1atHxYqe3+eZM2cyd+7cPNkWbPjbNfQZsML+uxZLXtprNLEblV9aBGaMIFhQVR566CE6dOjA0aNH2bVrF4sWLfKQBQgUMTExvPPOO3m6xq5du3xq+ffu3Zvdu3ezf/9+Spcu7aFl786UKVMYOnSokz5w4ADXrl1j06ZNXLhwwS87Tp48ySOPPMLkyZM5dOgQiYmJdOnShZ/smN255U9/+hMjR47k8OHDVKtWjb/+9a+Z8vz+9793VvfOnz+fsLAwoqKiAOjWrRvbt2eewf7EE08wY8aMPNkWbPjbNdTcPS0irYGhPrLf0JgxgsLhv5MmceVA/spQl2nciFvGjPF5fN26dZQuXZqnnnrK2XfbbbcxYsQIwHrr7d+/v/ODOHPmTNq1a+fIKrsUNIcPH05MTAwDBw7MsTTzihUr2L59O88884yjHTNv3jwiIyOJi4tj+fLlXLx4kSNHjjgLp1w899xzTJw4kYULF/qsY3p6OhcuXKBatWqZjn3zzTeUKVPG0dsBS6unf//+HDhwgGXLltGvX79s7/OsWbMYMGCAh0icN0mEnKCqrFu3jr///e+AJcz36quvZikN/eGHH3q0ZDJq87goX748oaGhbN++nTZt2uTJzmAhVyuhVPUrEckq/vCNhxkjCDr2799P69atfR6vWbMmq1evpmzZsiQnJ9O3b98so3b5kp/OSpoZoFGjRmzatImSJUuyZs0axowZw8cffwxYUaoSExMpU6YMkZGRjBgxgnr1rMB+vXr14t1333W0dtxJSEhg8+bNpKSk0LBhQ7p165Ypz5YtWzLVPyEhgdWrV3Pw4EFmzJjhlyPYt2+f1zgGGTl06JBPFdENGzZQtWpVJ33mzBmqVq3qaO37knDOaPuyZcuytQOsFtmmTZuMI/ATf1cWP+uWLAG0Bk4ExKIAIS4/IGaMoDDI6s29oBg2bBibN2+mdOnS7Nixg7S0NIYPH87u3bsJCQnJVgTNl/x0dtLMqampDBgwgOTkZETEEbkD6NSpE1WqVAGgSZMmfPvtt44jCAkJYdSoUbzxxhuZgp307t2bmTNnoqoMGzaMqVOnZgrdmJKSQo0aNZz0zp07qV69OvXr16dOnTo88cQT/Pjjj9x00035IuEcGRmZ7xLOLlyxIfwVYatZsyYHD+ZvC7Q44+8YQSW3TxmssYLMMns3NLYnCAmBkmWyzmooFjRt2tQj2MmsWbNYu3Ytp06dAiw9l1q1avH111+zc+dOZ7CyZMmSHnGNXTLILmnmnj17smLFCrp06QJYAmMTJkzg+++/Jzo6mjNnznjYMW7cOGJjY9m3bx+ffvqph6yyu4CaN1nq/v37s3HjRp8qnyJCt27d2LhxY6Zj3iScDx48SGhoKA0aNOD8+fNOy8Ql4ezCm4Rzdhw6dMhjYNf9k7GldPPNN3Pu3Dmnvr4knF0sWrSIvn37ZmuDi4KUcC4OZOsI7IVklVT1NfszUVUXqurl7M69kXC1CChtnECwcNddd3H58mVmz57t7HOf6ZKamkrt2rUpUaIE8+fP59q1a4A1jpCUlMSVK1c4d+6cIyGcW2nm1NRU50fOpTLpL6VKlWLkyJFMmzbNZ57Nmzc7ka3ccZdwvn79Oh999BF79+51JJyXLVvmIeG8YMECJ/h6fHy8I+E8fPhw4uPj+fLLL51rf/LJJ5w8edKjPFeLwNvHvVsILAcWGxvrBAWKj4/3KuHsbnvGmU5ZUZASzsWBLB2BiJRU1WvArwvIngDi0pgwbwnBgoiwdOlSvvjiC8LCwmjTpg0DBgxg8uTJAAwdOpT4+HhatmzJwYMHneAo9erVo1evXjRr1oxevXrRqlUrwJJmfuCBB2jRogW/+c1vPKSZmzdvTrNmzWjXrl2m4CejR4/mxRdfpFWrVtkGovHGoEGDMp2XkJBAVFQULVq0IDExkXHjxmU6r0OHDiQmJqKqbNq0iTp16nDrrbd6HE9KSiIlJYUnn3ySSpUq0bJlS1q2bMnPP//M888/D0CtWrVYtGgRzz//PJGRkTRu3JhVq1ZRqVLextpc4SojIiI4c+aMo7S5fPlyJ4QlwMaNG6lXr16mADujR4+mbt26XLx4kbp16/Lqq686x7Zs2eJEbTNkT5Yy1CLyla0xNBuoA/wDcOacqeongTfRk9zKUE9/djE1Tpzm7vrvU2uKf1GVDHnDyFAXPs888wzdunXj7rsLPjx4YZGYmMjbb7/tBKkJRgIiQw2UBc5gqY8q1twbBQrcEeQal78rY1oEhuBhzJgxHl06wcDp06d5/fW8xxsJJrJzBDXtGUP7+MUBuChaEW1M15AhCKlVqxbdu3cvbDMKFNMllHOycwQhQEU8HYCLIuUInOmjZbwHyTYYDIZgJTtHkKKq47PJU0SwPYHpGjIYDAYPsps+mrMVJTcwzvRR0yIwGAwGD7JzBPkTz/GGwPIEYlYVGwwGgwdZOgJV/bGgDAk0jvpoWdMiCBa+//57wsLC+PFH69/47NmzhIWFcfz4cQCSk5N54IEHaNCgAdHR0cTGxjordLOTen7rrbdo1KgRUVFR3HHHHfztb38DMss55wV3KesrV65w9913ExUVRUJCAoMHD/apTOov06dPd+wGS8CuRo0amaQqQkNDOX36tJPesGGDI68BsHLlSmJiYmjSpAmtWrXiueeey5Nd4FtiOiNvvPEGERERREZGsmrVKmf/v/71LyIjI4mIiODNN9909vfp04fk5OQ821fsUNUi9YmOjtbcMGP4Ql3Qe7ae/OSNXJ1vyDlJSUmFbYJOnjxZ//CHP6iq6pNPPqmTJk1SVdVLly7p7bffrsuWLXPy7t27V+fNm6eqqvPmzdNhw4Y5x/r27atz585VVdXZs2frPffco6mpqaqqmpqaqnFxcaqq2rFjR92xY0e+12Pr1q3aqVOnXJ+fnp7ukU5LS9PmzZtrWlqas++f//yntmvXTsPDw/X69evO/ttuu01PnTrlpNevX69du3ZVVeuehYeH64EDB5xy3n333Vzb6WLr1q164sQJrVChgs88+/fv1xYtWujly5f16NGjGh4erunp6Zqenq7h4eF65MgRvXLlirZo0UL379+vqqobNmzQwYMH59m+Gx1v3z1gp/r4Xc2V+mhRxNUikLKma6gw2PTRN5z+/ud8vWb1ehVp36thlnlGjhxJdHQ006dPZ/PmzcycOROwAp60bdvWY2pls2bNvMoSZJR6njRpEhs2bKBy5coAVK5c2as655AhQ9ixYweXLl2iZ8+evPbaawA5lrKeO3cujz76KKdOnSIqKoqPP/6YQYMG8dZbbxETE8Pnn3/OK6+8wpUrV2jQoAHz5s2jYsWKhIaG0rt3b1avXs3o0aM9JBrWrVtH69atHfVPsLSInnnmGWbPns3WrVtp165dts9gypQpjB07lkaNGgGWXlJWUtL+4kti2p1ly5bRp08fypQpQ1hYGBEREU58goiICGclcp8+fVi2bBlNmjShffv2DBw4kPT0dI+6BztBcyecrqFylQvXEEOBUqpUKaZOnUqXLl34/PPPKVWqFJC9RDV4l3o+f/48P/30Uya5A29MnDiRm266iWvXrtGpUyf27NlDnTp1cixlXbNmTT744AOPGAkuTp8+zYQJE1izZg0VKlRwZBtcEg0333yzh/Ceiy1bthAdHe2kL1++zJo1a/jLX/7CuXPn+PDDD/1yBPv27fOrK2j9+vWMHDky0/7y5cvz73//O9vzvfGf//zHw2G4S1m7FFxd+12L6kqUKEFERARff/21R/2DnaBxBKitJlnOxCIoDLJ7cw8kK1eupHbt2uzbt8/nYqMePXqQnJxMw4YN+eQTa8G8N6ln92hf2fHRRx/x3nvvkZ6eTkpKCklJSTRp0iRXUta+2LZtG0lJSfz615Yc2NWrVz0CyPiKD5CSkuIhQbBixQpiY2MpV64cDz/8MK+//jrTp08nJCQkXySqY2NjAyZRnVNq1qzJiRMnjCNww18Z6lwhIl1E5JCIHBaRF7wcLyMiCfbxL0UkNGC2OOsITIsgmNi9ezerV69m27ZtTJs2jZSUFCCzRPWSJUuIi4tzBpbdcZd6rly5MhUrVuTo0aNZlnvs2DHeeust1q5dy549e+jatSuXL1/OtZS1L1SVzp07OyqfSUlJHiEfXUJ6GfEmUb1mzRpCQ0Od8tetWwfkj0T1+vXrvcpT+9Pq8EWdOnU8lF5dUta+9rswEtWZCZgjsOWrZwH3AU2AviLSJEO2QcBZVY0ApgGTA2aPa4ygfJVAFWG4wVBVhgwZwvTp06lfvz6jRo1yFDX79evHli1bWL58uZM/q2Ds7lLPL774IsOGDeP8+fOAJU/tPvsG4Pz581SoUIEqVapw8uRJVq5c6eTNjZS1L+688062bNniyE1fuHAh2wA74ClRff78eTZt2sR3333nSFTPmjXLQ6LaJeB27do1FixY4EhUjxo1ikmTJjllXr9+nTlz5mQqz9UiyPjJbbcQQPfu3Vm0aBFXrlzh2LFjJCcn06ZNG+644w6Sk5M5duwYV69eZdGiRR5jQUaiOjOBbBG0AQ6r6lFVvQosInMwmweBeHt7MdBJctrm9BOXI1AzRhA0vP/++9SvX9/pDho6dCgHDhzgiy++oFy5cqxYsYI5c+YQHh5O27ZtmTBhAi+99JJzvi+p5yFDhhAbG8sdd9xBs2bNaN++PSVKeH6VWrZsSatWrWjUqBH9+vVzum5yK2Xtixo1ahAXF0ffvn1p0aIFbdu29Ssy13333edMlV2yZAl33XWXR5CcBx98kE8//ZQrV64wbtw4Dh8+7NQpIiKCRx99FIAWLVowffp0+vbtS+PGjWnWrFm2rSV/8CUx7S5R3bRpU3r16kWTJk3o0qULs2bNIiQkhJIlSzJz5kzuvfdeGjduTK9evWjatCkAJ0+epFy5ctxyyy15trE4kaUMdZ4uLNIT6KKqg+10f+BXqjrcLc8+O88PdvqIned0hms9CTwJUL9+/ehvv/02x/bMG/UukvJfHpr5NFWrVs/+BEOeMTLUNzY9evRgypQp3H777YVtSoExbdo0Kleu7MQ+KK4ESoa6UFHV94D3wIpHkJtrPD7V/0E+gyEYePPNN0lJSQkqR1C1alX69+9f2GbccATSEfwHqOeWrmvv85bnBxEpCVTBintgMBgCTGRkJJGRkYVtRoHy+OOPF7YJNySBHCPYAdwuImEiUhroAyzPkGc54FqJ0xNYp4HqqzIUCuZxGgwFS26+cwFzBKqaDgwHVgEHgI9Udb+IjBcR1xD+X4GbReQw8CyQaYqpoehStmxZzpw5Y5yBwVBAqCpnzpyhbNmyOTovYIPFgSK3MYsNBU9aWho//PCDx3x1g8EQWMqWLUvdunWdVfQuivxgsaFoUqpUKcLCwgrbDIPBkA0BXVlsMBgMhhsf4wgMBoMhyDGOwGAwGIKcIjdYLCKngJwvLbaoDpzONlfxwtQ5ODB1Dg7yUufbVLWGtwNFzhHkBRHZ6WvUvLhi6hwcmDoHB4Gqs+kaMhgMhiDHOAKDwWAIcoLNEbxX2AYUAqbOwYGpc3AQkDoH1RiBwWAwGDITbC0Cg8FgMGTAOAKDwWAIcoqlIxCRLiJySEQOi0gmRVMRKSMiCfbxL0UktOCtzF/8qPOzIpIkIntEZK2I3FYYduYn2dXZLd/DIqIiUuSnGvpTZxHpZT/r/SLy94K2Mb/x43+7voisF5FE+//7/sKwM78Qkbki8j87gqO34yIi79j3Y4+ItM5zoaparD5ACHAECAdKA18DTTLkGQrMsbf7AAmFbXcB1DkWKG9vDwmGOtv5KgEbgW1ATGHbXQDP+XYgEahmp2sWtt0FUOf3gCH2dhPgeGHbncc6dwBaA/t8HL8fWAkIcCfwZV7LLI4tgjbAYVU9qqpXgUXAgxnyPAjE29uLgU4iIgVoY36TbZ1Vdb2qXrST27AixhVl/HnOAK8Dk4HioIXtT53/AMxS1bMAqvq/ArYxv/GnzgpUtrerACcK0L58R1U3Aj9mkeVB4G9qsQ2oKiK181JmcXQEdYDv3dI/2Pu85lErgE4qcHOBWBcY/KmzO4Ow3iiKMtnW2W4y11PVzwrSsADiz3NuCDQUkS0isk1EuhSYdYHBnzq/CjwqIj8A/wRGFIxphUZOv+/ZYuIRBBki8igQA3QsbFsCiYiUAN4GBhayKQVNSazuod9itfo2ikhzVT1XqFYFlr5AnKr+WUTaAvNFpJmqXi9sw4oKxbFF8B+gnlu6rr3Pax4RKYnVnDxTINYFBn/qjIjcDYwFuqvqlQKyLVBkV+dKQDNgg4gcx+pLXV7EB4z9ec4/AMtVNU1VjwHfYDmGooo/dR4EfASgqluBsljibMUVv77vOaE4OoIdwO0iEiYipbEGg5dnyLMcGGBv9wTWqT0KU0TJts4i0gr4C5YTKOr9xpBNnVU1VVWrq2qoqoZijYt0V9WiHOfUn//tpVitAUSkOlZX0dGCNDKf8afO3wGdAESkMZYjOFWgVhYsy4HH7NlDdwKpqpqSlwsWu64hVU0XkeHAKqwZB3NVdb+IjAd2qupy4K9YzcfDWIMyfQrP4rzjZ52nAhWBf9jj4t+pavdCMzqP+FnnYoWfdV4F3CMiScA1YJSqFtnWrp91fg54X0RGYg0cDyzKL3Yi8iGWM69uj3u8ApQCUNU5WOMg9wOHgYvA43kuswjfL4PBYDDkA8Wxa8hgMBgMOcA4AoPBYAhyjCMwGAyGIMc4AoPBYAhyjCMwGAyGIMc4giBARK6JyG63T2gWeX/Oh/LiROSYXdZX9mrPnF7jAxFpYm+PyXDs33m10b6O677sE5FPRaRqNvmjcqNsKSK1RWSFvf1bEUm1yz0gIq/k4nrdXSqcIvKQ6z7Z6fH2wsE8YT/Dntnk2ZCTBXp23Vf4kc+r+qaIvCUid/lbnsF/jCMIDi6papTb53gBlDlKVaOAF7AWsuUIVR2sqkl2ckyGY+3ywT745b40w1pPMiyb/FFY87dzyrPA+27pTfa9icHSyMmRjLCqLlfVN+3kQ1iKm65jL6vqmlzYeCMRB3jTSJqB9f9kyGeMIwhCRKSiWDEJvhKRvSKSSbXTfovd6PbG3N7ef4+IbLXP/YeIVMymuI1AhH3us/a19onIH+19FUTkMxH52t7f296/QURiRORNoJxtx0L72M/230Ui0tXN5jgR6SkiISIyVUR2iKXX/v/8uC1bsYW7RKSNXcdEEfm3iETaq1rHA71tW3rbts8Vke12Xm/qpwAPA//KuFNVLwC7gAi7tbHNtneJiFSzbXlafokjscjeN1BEZopIO6A7MNW2qYHbPegiIv9wuzfO23hOn6GIvGzfy30i8p5WgceWAAAE50lEQVSIh1Jvf7f/kTZ2fn/vi1d8qW+q6rfAzSJyS06uZ/CDwtDbNp+C/WCtMN1tf5ZgrSivbB+rjrVC0bW48Gf773PAWHs7BEu7pzrWD3sFe/+fgJe9lBcH9LS3HwG+BKKBvUAFrBXO+4FWWD+S77udW8X+uwE7foDLJrc8Lht7APH2dmksRcZywJPAS/b+MsBOIMyLnT+71e8fQBc7XRkoaW/fDXxsbw8EZrqdPwl41N6uiqXrUyFDGWHALrf0b4EV9vbNwHGgKbAH6GjvHw9Mt7dPAGVcZWS0w/1eu6ftZ/yd27OaDTyay2d4k9v++UA3t2f0vr3dAVs/39d9yVD3GOCDLP5nQ/Gix4/Vsnq4sL9Txe1T7CQmDF65pFZXBAAiUgqYJCIdgOtYb8K1gP+6nbMDmGvnXaqqu0WkI1Y3xBb7pbA01pu0N6aKyEtYmi+DsLRglqj1FoyIfAK0x3pT/rOITMb6kdiUg3qtBP5PRMpgdSVsVNVLInIP0MKtj7sKlvDasQznlxOR3Xb9DwCr3fLHi8jtWJIFpXyUfw/QXUSet9Nlgfr2tVzUJrPuTXsRScS6929iCcVVVdUv7OPxWI4JLAexUESWYukI+YVa0gz/ArqJyGKgKzAaS3XW32foIlZERgPlgZuwnPin9rEP7fI2ikhlscZZfN0Xd/t2AoP9rY8b/wNuzcV5hiwwjiA4+T1QA4hW1TSx1DnLumewv9gdsH5A4kTkbeAssFpV+/pRxihVXexKiEgnb5lU9Ru7j/x+YIKIrFXV8f5UQlUvi8gG4F6gN1bQErAiN41Q1VXZXOKSqkaJSHksLZthwDtYwWzWq2oPsQbWN/g4X7DeTg9lVQYZ7i3WGMEDzkVEqmRxflest+1uwFgRaZ5F3owsAoZjdbPsVNWf7G4df58hIlIWeBerdfa9iLyKZ30yatQoPu6LiNTKge2+KIt1Tw35iBkjCE6qAP+znUAskCl+sVgxjU+q6vvAB1ih87YBvxYRV59/BRFp6GeZm4CHRKS8iFTA6tbZJCK3AhdVdQGWMJ63gdM0u2XijQQs0S1X6wKsH/UhrnNEpKFdplfUitz2NPCc/CJL7pL1HeiW9SesLjIXq4ARrj5zsRReM/INVjeHT1Q1FTgr9jgM0B/4QqyYCvVUdT1WF04VrG41dzLa5M4XWPfzD/ziJHP6DF0/+qftsYSMM4lcYzq/wVLBTMW/+5JbGgJeY/kaco9xBMHJQiBGRPYCjwEHveT5LfC13YXRG/g/VT2F9cP4oYjswepSaORPgar6FVa/83asMYMPVDURaA5st7toXgEmeDn9PWCP2IPFGfgcq7tjjVqhDMFyXEnAV2JNQfwL2bR+bVv2YAU5mQK8Ydfd/bz1QBPXYDFWy6GUbdt+O53xuheAI64f3iwYgNWdtgdrdtJ4rLGLBfZzSgTe0cwBZhYBo+xB2QYZyr4GrADus/+S02dol/c+1o/vKqwuQ3cu2/dpDlYXIPhxX8SaCPCBtzLFUt/cCkSKyA8iMsjeXwpr4kFRlhK/ITHqowZDgBGRHljdcC8Vti1FGfs+tlbVcYVtS3HDjBEYDAFGVZeISFGOiX2jUBL4c2EbURwxLQKDwWAIcswYgcFgMAQ5xhEYDAZDkGMcgcFgMAQ5xhEYDAZDkGMcgcFgMAQ5/x8j47oK3dYOKgAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["############################################# 5.1 ###################################################\n","# (Class Imbalance / SMOTEENN + Random Forest)"],"metadata":{"id":"8qNa3Qm-kZ4X","executionInfo":{"status":"ok","timestamp":1653755997294,"user_tz":-480,"elapsed":15,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# SMOTE for class imbalance problem\n","from imblearn.combine import SMOTEENN\n","sm = SMOTEENN()\n","X_train_sen, y_train_sen = sm.fit_resample(X_train, y_train)\n","# re-shuffling and train model on re-sample data"],"metadata":{"id":"2-Uk9DrwkZ6t","executionInfo":{"status":"ok","timestamp":1653755997854,"user_tz":-480,"elapsed":574,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["#Call the Classifier\n","from sklearn.ensemble import RandomForestClassifier\n","sm_rf = RandomForestClassifier(n_estimators=10)\n","sm_rf.fit(X_train_sen, y_train_sen)"],"metadata":{"id":"DO9dAb1LkZ9b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755997855,"user_tz":-480,"elapsed":19,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"19e764da-95dd-479b-e8de-74039428d37e"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(n_estimators=10)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["y_pred_rrf = sm_rf.predict(X_test)\n","print(classification_report(y_test, y_pred_rrf))"],"metadata":{"id":"vh4ZDZeRkaAX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755997855,"user_tz":-480,"elapsed":18,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"231ed906-8de9-46d8-f521-7ed678ab2259"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99      1986\n","           1       0.33      0.86      0.48        14\n","\n","    accuracy                           0.99      2000\n","   macro avg       0.67      0.92      0.74      2000\n","weighted avg       0.99      0.99      0.99      2000\n","\n"]}]},{"cell_type":"code","source":["result_rrf = confusion_matrix(y_test, y_pred_rrf)\n","print('Confusion Matrix')\n","print(result_rrf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ISHNv0K-uv65","executionInfo":{"status":"ok","timestamp":1653755997856,"user_tz":-480,"elapsed":13,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b74130be-1021-4032-9111-92421eb8cd6e"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1962   24]\n"," [   2   12]]\n"]}]},{"cell_type":"code","source":["############################################# 5.2 ###################################################\n","# (Class Imbalance / SMOTEENN + XGBoost)"],"metadata":{"id":"eauSC_0G2JgW","executionInfo":{"status":"ok","timestamp":1653755997856,"user_tz":-480,"elapsed":9,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["sm = SMOTEENN()\n","X_resampled_xgb, y_resampled_xgb = sm.fit_resample(X, Y)"],"metadata":{"id":"ntxC2Ibr2Jj9","executionInfo":{"status":"ok","timestamp":1653755997859,"user_tz":-480,"elapsed":11,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":62,"outputs":[]},{"cell_type":"code","source":["xr_train_xgb,xr_test_xgb,yr_train_xgb,yr_test_xgb=train_test_split(X_resampled_xgb, y_resampled_xgb,test_size=0.2)"],"metadata":{"id":"Celd6e93pL_W","executionInfo":{"status":"ok","timestamp":1653755997860,"user_tz":-480,"elapsed":12,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["classifier_xgb_smt=xgboost.XGBClassifier()\n","classifier_xgb_smt.fit(xr_train_xgb, yr_train_xgb)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pQ6lVWBGpMCt","executionInfo":{"status":"ok","timestamp":1653755998961,"user_tz":-480,"elapsed":1112,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5dc77b04-b5d8-4037-cdde-2ea123773049"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier()"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["yr_predict_xgb_smt = classifier_xgb_smt.predict(xr_test_xgb)"],"metadata":{"id":"sqiGP5FqpMFQ","executionInfo":{"status":"ok","timestamp":1653755998963,"user_tz":-480,"elapsed":60,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","source":["print('Accuracy is ' ,round(accuracy_score(yr_test_xgb, yr_predict_xgb_smt)*100,2), '%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mL2d1fT4pMH1","executionInfo":{"status":"ok","timestamp":1653755998965,"user_tz":-480,"elapsed":61,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"665425fe-d215-42b9-cefb-031b044c46bf"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy is  98.34 %\n"]}]},{"cell_type":"code","source":["result1_xgb_smt = classification_report(yr_test_xgb, yr_predict_xgb_smt)\n","print(result1_xgb_smt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hf-L502qpYac","executionInfo":{"status":"ok","timestamp":1653755998966,"user_tz":-480,"elapsed":54,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5553a806-45ab-41e6-cc49-451139a63fd8"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      0.97      0.98      1909\n","           1       0.97      1.00      0.98      1957\n","\n","    accuracy                           0.98      3866\n","   macro avg       0.98      0.98      0.98      3866\n","weighted avg       0.98      0.98      0.98      3866\n","\n"]}]},{"cell_type":"code","source":["result1_xgb_smt = confusion_matrix(yr_test_xgb, yr_predict_xgb_smt)\n","print('Confusion Matrix')\n","print(result1_xgb_smt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7NP26-QxvKBz","executionInfo":{"status":"ok","timestamp":1653755998967,"user_tz":-480,"elapsed":50,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3175d43a-c823-4ae4-e307-ba5c6f4adee8"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1853   56]\n"," [   8 1949]]\n"]}]},{"cell_type":"code","source":["############################################# 5.3 ################################################### \n","\"\"\"\n","\"\"\"\n","# (Class Imbalance - XGBoost + Up/Down Sampling)"],"metadata":{"id":"RZwBOPk_kaDN","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653755998968,"user_tz":-480,"elapsed":46,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"96461937-92bc-4caa-d2c1-a61d16748b34"},"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":69}]},{"cell_type":"code","source":["from sklearn.utils import resample\n","\n","data_majority = df[df['isFraud']==0]\n","data_minority = df[df['isFraud']==1]"],"metadata":{"id":"zkrq23aCkaF1","executionInfo":{"status":"ok","timestamp":1653755998970,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["data_majority.isFraud.value_counts()"],"metadata":{"id":"kVSW3aGLm6Eq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755998971,"user_tz":-480,"elapsed":45,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"697486e4-3f8e-4d0c-ccae-cfa93f4ac894"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    9932\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["data_minority.isFraud.value_counts()"],"metadata":{"id":"mpmbGkg-m6il","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755998973,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f6ae861f-1383-450a-8f1b-2f4ff1036927"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1    68\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["# Downsampling & Upsampling using resample method\n","len(df.loc[df['isFraud'] == 1])"],"metadata":{"id":"JaZgjsVvm6lM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755998977,"user_tz":-480,"elapsed":42,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5f42cc6a-b350-4e45-d4c7-3d2fa32ab544"},"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["68"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","source":["data_majority_downsample = resample(data_majority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 1]),    \n","                                 random_state=123) \n","data_minority_downsample = resample(data_minority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 1]),    \n","                                 random_state=123) \n","df_train = pd.concat([data_majority_downsample, data_minority_downsample])"],"metadata":{"id":"hzJaQMNmm6nx","executionInfo":{"status":"ok","timestamp":1653755998978,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["# Display new class counts\n","print (df_train.isFraud.value_counts())"],"metadata":{"id":"293uVdyTm6rB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755998979,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e9617ec7-4bca-4bd7-9715-98542a0b5110"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["0    68\n","1    68\n","Name: isFraud, dtype: int64\n"]}]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"id":"fnGbeCIjnBYJ","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1653755998980,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"39f98a56-ef7c-4775-bd9e-aa132ef1688e"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step     amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","3604     2   30709.74           0.00            0.00            0.00   \n","1357     1    4074.17         574.00            0.00            0.00   \n","5260     5    1948.60         441.00            0.00            0.00   \n","7829     7    3751.13      983668.00       979916.87            0.00   \n","9853     7  120142.49       42244.79            0.00       139480.44   \n","\n","      newbalanceDest  isFraud  isFlaggedFraud  \n","3604            0.00        0               0  \n","1357            0.00        0               0  \n","5260            0.00        0               0  \n","7829            0.00        0               0  \n","9853       259622.93        0               0  "],"text/html":["\n","  <div id=\"df-620eb614-1cfe-4740-9522-87088c8c7d5f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3604</th>\n","      <td>2</td>\n","      <td>30709.74</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1357</th>\n","      <td>1</td>\n","      <td>4074.17</td>\n","      <td>574.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5260</th>\n","      <td>5</td>\n","      <td>1948.60</td>\n","      <td>441.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7829</th>\n","      <td>7</td>\n","      <td>3751.13</td>\n","      <td>983668.00</td>\n","      <td>979916.87</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9853</th>\n","      <td>7</td>\n","      <td>120142.49</td>\n","      <td>42244.79</td>\n","      <td>0.00</td>\n","      <td>139480.44</td>\n","      <td>259622.93</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-620eb614-1cfe-4740-9522-87088c8c7d5f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-620eb614-1cfe-4740-9522-87088c8c7d5f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-620eb614-1cfe-4740-9522-87088c8c7d5f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["\"\"\"\n","drop \"type\" column?\n","df_train_ds=df.drop(['type'],axis='columns')\n","\"\"\"\n","## Drop Categorical Features\n","df_train=df_train.drop(['isFlaggedFraud'],axis=1)"],"metadata":{"id":"2ciYCirpnBa0","executionInfo":{"status":"ok","timestamp":1653755998982,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":77,"outputs":[]},{"cell_type":"code","source":["train, test = train_test_split(df_train, test_size = 0.2)\n"," \n","train_y_upsampled = train['isFraud']\n","test_y_upsampled = test['isFraud']\n"," \n","train_x_upsampled = train\n","train_x_upsampled.pop('isFraud')\n","test_x_upsampled = test\n","test_x_upsampled.pop('isFraud')"],"metadata":{"id":"J254OB4yqLg8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755999485,"user_tz":-480,"elapsed":41,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f4978e77-9786-443c-c973-07b8f8d65a0d"},"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1870    1\n","4693    1\n","3503    0\n","7829    0\n","1858    0\n","5853    1\n","5995    1\n","4337    0\n","6798    0\n","5853    1\n","41      0\n","2354    0\n","8051    0\n","9285    1\n","4857    1\n","3162    1\n","9084    0\n","844     0\n","9678    0\n","6583    1\n","3       1\n","6632    0\n","6703    1\n","6165    0\n","4775    1\n","5994    1\n","6703    1\n","8629    0\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["classifier_rsp=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n","       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n","       n_estimators=100, n_jobs=1, nthread=None,\n","       objective='binary:logistic', random_state=0, reg_alpha=0,\n","       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n","       subsample=1)\n","\n","\n","#XGBClassifier_balanced = XGBClassifier()\n","classifier_rsp.fit(X=train_x_upsampled, y=train_y_upsampled)\n"," \n","test_y_pred_balanced = classifier_rsp.predict(test_x_upsampled)\n","print('Accuracy of XGBoost classifier on test set: {:.2f}'.format(classifier_rsp.score(test_x_upsampled, test_y_upsampled)))\n","print(classification_report(test_y_upsampled, test_y_pred_balanced))\n","\n","\"\"\"\n","Line 3 is fraud / is not fraud\n","\"\"\"\n","\n","from sklearn.metrics import confusion_matrix, classification_report\n","confusion_matrix_us1 = confusion_matrix(test_y_upsampled, test_y_pred_balanced)\n","confusion_matrix_us2 = pd.DataFrame(confusion_matrix_us1, ('Is Fraud', 'Not Fraud'), ('Is Fraud', 'Not Fraud'))\n","heatmap = sns.heatmap(confusion_matrix_us2, annot=True, annot_kws={\"size\": 20}, fmt=\"d\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize = 14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize = 14)\n","plt.ylabel('True label', fontsize = 14)\n","plt.xlabel('Predicted label', fontsize = 14)"],"metadata":{"id":"wY0PrFX9qLl0","colab":{"base_uri":"https://localhost:8080/","height":522},"executionInfo":{"status":"ok","timestamp":1653755999487,"user_tz":-480,"elapsed":40,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"52627814-3223-408b-bfaa-86d2bba361cf"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGBoost classifier on test set: 0.93\n","              precision    recall  f1-score   support\n","\n","           0       0.93      0.93      0.93        14\n","           1       0.93      0.93      0.93        14\n","\n","    accuracy                           0.93        28\n","   macro avg       0.93      0.93      0.93        28\n","weighted avg       0.93      0.93      0.93        28\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 15.0, 'Predicted label')"]},"metadata":{},"execution_count":79},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","result_rrf_rsp = confusion_matrix(test_y_upsampled, test_y_pred_balanced)\n","print('Confusion Matrix')\n","print(result_rrf_rsp)"],"metadata":{"id":"BhGWQiUFaTO2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653755999488,"user_tz":-480,"elapsed":25,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"42497d03-26ca-47cf-f411-1eecf1d1fbee"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[13  1]\n"," [ 1 13]]\n"]}]},{"cell_type":"code","source":["############################################# Up Sampling ################################################### \n","\"\"\"\n","\"\"\""],"metadata":{"id":"VJGrv2BnkaIf","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653756536475,"user_tz":-480,"elapsed":411,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"2be8c897-69ad-477e-fe28-623f93fccc1d"},"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["df_minority_upsampled = resample(data_minority, \n","                                 replace=True,     \n","                                 n_samples=len(df.loc[df['isFraud'] == 0]),    \n","                                 random_state=123) \n","\n","df_train_up = pd.concat([data_majority, df_minority_upsampled])"],"metadata":{"id":"FotWfRJNjRp0","executionInfo":{"status":"ok","timestamp":1653756537425,"user_tz":-480,"elapsed":480,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":82,"outputs":[]},{"cell_type":"code","source":["# Display new class counts\n","print (df_train_up.isFraud.value_counts())"],"metadata":{"id":"ZYhHoq2OkaUz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653756538707,"user_tz":-480,"elapsed":3,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6168b5a2-66d7-4ece-bddb-b0bb72275afc"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["0    9932\n","1    9932\n","Name: isFraud, dtype: int64\n"]}]},{"cell_type":"code","source":["df_train_up"],"metadata":{"id":"LISUWnhgjSUy","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1653756539939,"user_tz":-480,"elapsed":9,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"75d454f4-5fc4-4756-fffb-79d2f2bc2985"},"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step     amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","0        1    9839.64      170136.00       160296.36             0.0   \n","1        1    1864.28       21249.00        19384.72             0.0   \n","4        1   11668.14       41554.00        29885.86             0.0   \n","5        1    7817.71       53860.00        46042.29             0.0   \n","6        1    7107.77      183195.00       176087.23             0.0   \n","...    ...        ...            ...             ...             ...   \n","252      1    2806.00        2806.00            0.00         26202.0   \n","7029     6   85354.69       85354.69            0.00             0.0   \n","3162     2  963532.14      963532.14            0.00             0.0   \n","4693     4   13707.11       13707.11            0.00             0.0   \n","7154     6   13704.00       13704.00            0.00             0.0   \n","\n","      newbalanceDest  isFraud  isFlaggedFraud  \n","0               0.00        0               0  \n","1               0.00        0               0  \n","4               0.00        0               0  \n","5               0.00        0               0  \n","6               0.00        0               0  \n","...              ...      ...             ...  \n","252             0.00        1               0  \n","7029            0.00        1               0  \n","3162            0.00        1               0  \n","4693            0.00        1               0  \n","7154      1658746.09        1               0  \n","\n","[19864 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-0e0f4b88-cc53-4ea4-b0bf-3d8811f3dde7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","      <th>isFlaggedFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>9839.64</td>\n","      <td>170136.00</td>\n","      <td>160296.36</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1864.28</td>\n","      <td>21249.00</td>\n","      <td>19384.72</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>11668.14</td>\n","      <td>41554.00</td>\n","      <td>29885.86</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>1</td>\n","      <td>7817.71</td>\n","      <td>53860.00</td>\n","      <td>46042.29</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>1</td>\n","      <td>7107.77</td>\n","      <td>183195.00</td>\n","      <td>176087.23</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>252</th>\n","      <td>1</td>\n","      <td>2806.00</td>\n","      <td>2806.00</td>\n","      <td>0.00</td>\n","      <td>26202.0</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7029</th>\n","      <td>6</td>\n","      <td>85354.69</td>\n","      <td>85354.69</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3162</th>\n","      <td>2</td>\n","      <td>963532.14</td>\n","      <td>963532.14</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4693</th>\n","      <td>4</td>\n","      <td>13707.11</td>\n","      <td>13707.11</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.00</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7154</th>\n","      <td>6</td>\n","      <td>13704.00</td>\n","      <td>13704.00</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>1658746.09</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>19864 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e0f4b88-cc53-4ea4-b0bf-3d8811f3dde7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0e0f4b88-cc53-4ea4-b0bf-3d8811f3dde7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0e0f4b88-cc53-4ea4-b0bf-3d8811f3dde7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":84}]},{"cell_type":"code","source":["#df_train_up=df_train_up.drop(['isFlaggedFraud'],axis=1)"],"metadata":{"id":"Q9W1YXY3ksHq","executionInfo":{"status":"ok","timestamp":1653756542115,"user_tz":-480,"elapsed":4,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["train, test = train_test_split(df_train_up, test_size = 0.2)\n"," \n","train_y_upsampled = train['isFraud']\n","test_y_upsampled = test['isFraud']\n"," \n","train_x_upsampled = train\n","train_x_upsampled.pop('isFraud')\n","test_x_upsampled = test\n","test_x_upsampled.pop('isFraud')"],"metadata":{"id":"zTw-8ba7msGH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653756543041,"user_tz":-480,"elapsed":5,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5c1d3855-ef8d-4813-b8da-243cc11b2ccf"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7155    1\n","9198    0\n","267     0\n","4858    1\n","4776    1\n","       ..\n","5139    0\n","8514    0\n","7127    0\n","2113    0\n","3163    1\n","Name: isFraud, Length: 3973, dtype: int64"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["df_train_up.isFraud.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ejq4JNSGxfU","executionInfo":{"status":"ok","timestamp":1653756551828,"user_tz":-480,"elapsed":447,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"fcea8bef-70bc-4807-bc6f-e5fb957e1333"},"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    9932\n","1    9932\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","classifier_2rsp=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","       colsample_bytree=0.5, gamma=0.4, learning_rate=0.1,\n","       max_delta_step=0, max_depth=6, min_child_weight=7, missing=None,\n","       n_estimators=100, n_jobs=1, nthread=None,\n","       objective='binary:logistic', random_state=0, reg_alpha=0,\n","       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n","       subsample=1)\n","\n","\n","#XGBClassifier_balanced = XGBClassifier()\n","classifier_2rsp.fit(X=train_x_upsampled, y=train_y_upsampled)\n"," \n","test_y_pred_balanced_2rsp = classifier_2rsp.predict(test_x_upsampled)\n","print('Accuracy of XGBoost classifier on test set: {:.2f}'.format(classifier_2rsp.score(test_x_upsampled, test_y_upsampled)))\n","print(classification_report(test_y_upsampled, test_y_pred_balanced_2rsp))\n"],"metadata":{"id":"JnWvA7EWnns3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653756552930,"user_tz":-480,"elapsed":818,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7b070d08-6eb3-4742-c03e-a6f66e11b33f"},"execution_count":88,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of XGBoost classifier on test set: 0.99\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99      1925\n","           1       0.99      1.00      0.99      2048\n","\n","    accuracy                           0.99      3973\n","   macro avg       0.99      0.99      0.99      3973\n","weighted avg       0.99      0.99      0.99      3973\n","\n"]}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","result_rrf_rsp2 = confusion_matrix(test_y_upsampled, test_y_pred_balanced_2rsp)\n","print('Confusion Matrix')\n","print(result_rrf_rsp2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gUje96gDah5k","executionInfo":{"status":"ok","timestamp":1653756556372,"user_tz":-480,"elapsed":332,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"9e99a8a9-8035-4840-eff2-9019049c30d7"},"execution_count":89,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1903   22]\n"," [   0 2048]]\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report\n","confusion_matrix_us_3 = confusion_matrix(test_y_upsampled, test_y_pred_balanced_2rsp)\n","confusion_matrix_us_4 = pd.DataFrame(confusion_matrix_us_3, ('Is Fraud', 'Not Fraud'), ('Is Fraud', 'Not Fraud'))\n","heatmap = sns.heatmap(confusion_matrix_us_4, annot=True, annot_kws={\"size\": 20}, fmt=\"d\")\n","heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize = 14)\n","heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize = 14)\n","plt.ylabel('True label', fontsize = 14)\n","plt.xlabel('Predicted label', fontsize = 14)\n"],"metadata":{"id":"u1a3c_drwTC_","colab":{"base_uri":"https://localhost:8080/","height":348},"executionInfo":{"status":"ok","timestamp":1653756687051,"user_tz":-480,"elapsed":343,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3a89f148-b281-4de6-8091-f8651364fe8a"},"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 15.0, 'Predicted label')"]},"metadata":{},"execution_count":90},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["############################################# 6.1 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT - Raw Data"],"metadata":{"id":"9FaqKpi8kaLx","executionInfo":{"status":"ok","timestamp":1653756692883,"user_tz":-480,"elapsed":282,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","#leaf_size = [2,3,5,10]\n","n_estimators_list = [1,2,3,10]\n","\n","for estim_list in n_estimators_list:\n","    model_mhpt = RandomForestClassifier(n_estimators=estim_list)\n","    model_mhpt.fit(X_train, y_train)\n","    y_pred_mhpt = model_mhpt.predict(X_test)\n","    result_mhpt = confusion_matrix(y_test, y_pred_mhpt)\n","    result2_mhpt = accuracy_score(y_test, y_pred_mhpt)\n","    print('\\n Estimator value: ', estim_list)\n","    print('Accuracy: ', result2_mhpt)"],"metadata":{"id":"h1xDseAikaOC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653756694723,"user_tz":-480,"elapsed":469,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"fc55845b-da66-47f9-9a43-4885db3247e6"},"execution_count":92,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Estimator value:  1\n","Accuracy:  0.994\n","\n"," Estimator value:  2\n","Accuracy:  0.9935\n","\n"," Estimator value:  3\n","Accuracy:  0.9945\n","\n"," Estimator value:  10\n","Accuracy:  0.9945\n"]}]},{"cell_type":"code","source":["leaf_size = [1,2,3,5,10]\n","\n","for i in leaf_size:\n","    model_mhpt = RandomForestClassifier(n_estimators=100, min_samples_leaf = i)\n","    model_mhpt.fit(X_train, y_train)\n","    y_pred_mhpt = model_mhpt.predict(X_test)\n","    result_mhpt = confusion_matrix(y_test, y_pred_mhpt)\n","    result2_mhpt = accuracy_score(y_test, y_pred_mhpt)\n","    print('\\n Leaf size: ', i)\n","    print('Accuracy: ', result2_mhpt)"],"metadata":{"id":"Y1WbzvqQkaTF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653756699625,"user_tz":-480,"elapsed":3061,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b07171e6-88c7-4946-b159-1d7ed0853c7b"},"execution_count":93,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Leaf size:  1\n","Accuracy:  0.996\n","\n"," Leaf size:  2\n","Accuracy:  0.9945\n","\n"," Leaf size:  3\n","Accuracy:  0.9945\n","\n"," Leaf size:  5\n","Accuracy:  0.9935\n","\n"," Leaf size:  10\n","Accuracy:  0.9935\n"]}]},{"cell_type":"code","source":["############################################# 6.2 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - Raw Data"],"metadata":{"id":"o2EJ9_kOkaV5","executionInfo":{"status":"ok","timestamp":1653756701810,"user_tz":-480,"elapsed":275,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":94,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","n_estimators_rs"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FoIQ4VqtxI0X","executionInfo":{"status":"ok","timestamp":1653756703093,"user_tz":-480,"elapsed":7,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4086719f-99c1-4d43-cc34-7e22856047a6"},"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators_rs,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","print(random_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WwNshVoNxI3M","executionInfo":{"status":"ok","timestamp":1653756704779,"user_tz":-480,"elapsed":6,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"925d9f9a-092a-40d8-fe3d-5ebd1cde9652"},"execution_count":96,"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"]}]},{"cell_type":"code","source":["\"\"\"\n","24 seconds\n","\"\"\"\n","# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestClassifier()\n","# Random search of parameters, using 3 fold cross validation, \n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 3, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kIVZZGTKxI5t","executionInfo":{"status":"ok","timestamp":1653756733266,"user_tz":-480,"elapsed":25807,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"93419738-09fe-4de6-ec50-131b4ceb8d9b"},"execution_count":97,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 3 candidates, totalling 9 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_iter=3,\n","                   n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"]},"metadata":{},"execution_count":97}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    accuracy = accuracy_score(test_labels,predictions)\n","    print('Model Performance')\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    return accuracy"],"metadata":{"id":"3D7XqwAWxI8I","executionInfo":{"status":"ok","timestamp":1653756737255,"user_tz":-480,"elapsed":424,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":98,"outputs":[]},{"cell_type":"code","source":["base_model = RandomForestClassifier(n_estimators = 10, random_state = 42)\n","base_model.fit(X_train, y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i_TV_fdGxI-b","executionInfo":{"status":"ok","timestamp":1653756738449,"user_tz":-480,"elapsed":8,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"07576810-5ac9-41f3-98cb-f83d9b74aae6"},"execution_count":99,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["best_random = rf_random.best_estimator_\n","print(best_random)\n","random_accuracy = evaluate(best_random, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LXKPBlBsxJBI","executionInfo":{"status":"ok","timestamp":1653756739915,"user_tz":-480,"elapsed":7,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7ef77d11-283a-411e-d5f7-97bdf239a631"},"execution_count":100,"outputs":[{"output_type":"stream","name":"stdout","text":["RandomForestClassifier(bootstrap=False, max_depth=30, min_samples_leaf=2,\n","                       n_estimators=1000)\n","Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["best_random"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a092HwgbxJEB","executionInfo":{"status":"ok","timestamp":1653756741901,"user_tz":-480,"elapsed":306,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"77765737-fe68-4390-933f-9141085a4887"},"execution_count":101,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=False, max_depth=30, min_samples_leaf=2,\n","                       n_estimators=1000)"]},"metadata":{},"execution_count":101}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"37sNgzxxxJGC","executionInfo":{"status":"ok","timestamp":1653756743105,"user_tz":-480,"elapsed":5,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"73f074a0-7da4-40ce-a333-524cd244c2bb"},"execution_count":102,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.05%.\n"]}]},{"cell_type":"code","source":["############################################# 6.3 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - Raw Data"],"metadata":{"id":"cX8w_9O6xJI3","executionInfo":{"status":"ok","timestamp":1653756744629,"user_tz":-480,"elapsed":448,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":103,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}"],"metadata":{"id":"bOeENcTT0ffG","executionInfo":{"status":"ok","timestamp":1653756767916,"user_tz":-480,"elapsed":306,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":104,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}\n","# Create a based model\n","rf_gd = RandomForestClassifier()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf_gd, param_grid = param_grid, \n","                          cv = 2, n_jobs = -1, verbose = 2)"],"metadata":{"id":"m6FphPAi0fkN","executionInfo":{"status":"ok","timestamp":1653756769463,"user_tz":-480,"elapsed":4,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":105,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","14 mins\n","\"\"\"\n","# Fit the grid search to the data\n","grid_search.fit(X_train, y_train)\n","grid_search.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DnzzFoC20fmX","executionInfo":{"status":"ok","timestamp":1653757418774,"user_tz":-480,"elapsed":646082,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6506f16e-831c-46bd-fa8c-3b11591e4091"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 288 candidates, totalling 576 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': True,\n"," 'max_depth': 80,\n"," 'max_features': 3,\n"," 'min_samples_leaf': 3,\n"," 'min_samples_split': 8,\n"," 'n_estimators': 300}"]},"metadata":{},"execution_count":106}]},{"cell_type":"code","source":["best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RGcscYxt0fof","executionInfo":{"status":"ok","timestamp":1653757418775,"user_tz":-480,"elapsed":26,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"7b767a0e-4ec7-40b0-9538-2dd9d962e842"},"execution_count":107,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rPY7pju80fra","executionInfo":{"status":"ok","timestamp":1653757418776,"user_tz":-480,"elapsed":20,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4d1501f6-75b3-4d68-8d71-7317c741cd44"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.21%.\n"]}]},{"cell_type":"code","source":["best_grid"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9mvx10CC0f1E","executionInfo":{"status":"ok","timestamp":1653757418776,"user_tz":-480,"elapsed":14,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"35f94f66-64e7-4547-e380-58c3c9381552"},"execution_count":109,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=80, max_features=3, min_samples_leaf=3,\n","                       min_samples_split=8, n_estimators=300)"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","source":["############################################# 6.4 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search + XGBoost - Raw Data"],"metadata":{"id":"wb1CUkIX3WZB","executionInfo":{"status":"ok","timestamp":1653757419438,"user_tz":-480,"elapsed":34,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":110,"outputs":[]},{"cell_type":"code","source":["## Hyper Parameter Optimization\n","\n","params={\n"," \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n"," \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n"," \"min_child_weight\" : [ 1, 3, 5, 7 ],\n"," \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n"," \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n","    \n","}"],"metadata":{"id":"A2jj7F0o3WjW","executionInfo":{"status":"ok","timestamp":1653757419439,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":111,"outputs":[]},{"cell_type":"code","source":["## Hyperparameter optimization using RandomizedSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"],"metadata":{"id":"tdmir92U3WmU","executionInfo":{"status":"ok","timestamp":1653757419439,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":112,"outputs":[]},{"cell_type":"code","source":["def timer(start_time=None):\n","    if not start_time:\n","        start_time = datetime.now()\n","        return start_time\n","    elif start_time:\n","        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n","        tmin, tsec = divmod(temp_sec, 60)\n","        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))"],"metadata":{"id":"nMlokhb-3Wo4","executionInfo":{"status":"ok","timestamp":1653757419440,"user_tz":-480,"elapsed":30,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":113,"outputs":[]},{"cell_type":"code","source":["classifier_new=xgboost.XGBClassifier()"],"metadata":{"id":"B4FqxejQ3WsG","executionInfo":{"status":"ok","timestamp":1653757419440,"user_tz":-480,"elapsed":28,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":114,"outputs":[]},{"cell_type":"code","source":["random_search=RandomizedSearchCV(classifier_new,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=3,verbose=3)"],"metadata":{"id":"umO3w7Ld3WvT","executionInfo":{"status":"ok","timestamp":1653757419440,"user_tz":-480,"elapsed":28,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":115,"outputs":[]},{"cell_type":"code","source":["from datetime import datetime\n","# Here we go\n","start_time = timer(None) # timing starts from this point for \"start_time\" variable\n","random_search.fit(X,Y)\n","timer(start_time) # timing ends here for \"start_time\" variable"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y3N9zS_83WyB","executionInfo":{"status":"ok","timestamp":1653757423190,"user_tz":-480,"elapsed":3777,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"73bf1469-0047-4106-ed74-d63902b3cf98"},"execution_count":116,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","\n"," Time taken: 0 hours 0 minutes and 4.05 seconds.\n"]}]},{"cell_type":"code","source":["random_search.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E15y5XJZ3t0n","executionInfo":{"status":"ok","timestamp":1653757423191,"user_tz":-480,"elapsed":43,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f7313f73-5053-47b5-f64c-3464baaef694"},"execution_count":117,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(colsample_bytree=0.4, gamma=0.2, learning_rate=0.3, max_depth=10,\n","              min_child_weight=3)"]},"metadata":{},"execution_count":117}]},{"cell_type":"code","source":["random_search.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJhjLitt3ug6","executionInfo":{"status":"ok","timestamp":1653757423192,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"6f448e3e-c8f8-45c7-d31d-327461db1191"},"execution_count":118,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'colsample_bytree': 0.4,\n"," 'gamma': 0.2,\n"," 'learning_rate': 0.3,\n"," 'max_depth': 10,\n"," 'min_child_weight': 3}"]},"metadata":{},"execution_count":118}]},{"cell_type":"code","source":["############################################# 7.1 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT --> 5.2 SMOTEENN Data - RF Classifier"],"metadata":{"id":"n03Tx84E6EAn","executionInfo":{"status":"ok","timestamp":1653757423193,"user_tz":-480,"elapsed":32,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":119,"outputs":[]},{"cell_type":"code","source":["xr_train_xgb.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YVUmY3WBFez5","executionInfo":{"status":"ok","timestamp":1653757423194,"user_tz":-480,"elapsed":33,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"48969d6c-e68b-4f70-c46c-ffbd2c16195d"},"execution_count":120,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       step         amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","3176      2    1330.820000   30803.000000        29472.18             0.0   \n","10261     3   12404.654855   12404.654855            0.00             0.0   \n","16276     2   21724.340719   21724.340719            0.00             0.0   \n","11509     3  246875.410222  246875.410222            0.00             0.0   \n","5657      6    2964.710000    1729.000000            0.00             0.0   \n","\n","       newbalanceDest  \n","3176              0.0  \n","10261             0.0  \n","16276             0.0  \n","11509             0.0  \n","5657              0.0  "],"text/html":["\n","  <div id=\"df-9684f10f-5481-47b6-9482-3735c115f272\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3176</th>\n","      <td>2</td>\n","      <td>1330.820000</td>\n","      <td>30803.000000</td>\n","      <td>29472.18</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>10261</th>\n","      <td>3</td>\n","      <td>12404.654855</td>\n","      <td>12404.654855</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>16276</th>\n","      <td>2</td>\n","      <td>21724.340719</td>\n","      <td>21724.340719</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>11509</th>\n","      <td>3</td>\n","      <td>246875.410222</td>\n","      <td>246875.410222</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>5657</th>\n","      <td>6</td>\n","      <td>2964.710000</td>\n","      <td>1729.000000</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9684f10f-5481-47b6-9482-3735c115f272')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9684f10f-5481-47b6-9482-3735c115f272 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9684f10f-5481-47b6-9482-3735c115f272');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":120}]},{"cell_type":"code","source":["yr_train_xgb.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-4EVcmB1Ffbl","executionInfo":{"status":"ok","timestamp":1653757423194,"user_tz":-480,"elapsed":29,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b56b7469-9f42-4cde-db40-6a35fbd77397"},"execution_count":121,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3176     0\n","10261    1\n","16276    1\n","11509    1\n","5657     0\n","Name: isFraud, dtype: int64"]},"metadata":{},"execution_count":121}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","#leaf_size = [2,3,5,10]\n","n_estimators_list = [1,2,3,10]\n","\n","for estim_list in n_estimators_list:\n","    model_mhpt_FNL = RandomForestClassifier(n_estimators=estim_list)\n","    model_mhpt_FNL.fit(xr_train_xgb, yr_train_xgb) #\n","    y_pred_mhpt_FNL = model_mhpt_FNL.predict(xr_test_xgb) #\n","    result_mhpt_FNL = confusion_matrix(yr_test_xgb, y_pred_mhpt_FNL) #\n","    result2_mhpt_FNL = accuracy_score(yr_test_xgb, y_pred_mhpt_FNL)  #\n","    print('\\n Estimator value: ', estim_list)\n","    print('Accuracy: ', result2_mhpt_FNL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oDKDpUSc6EXO","executionInfo":{"status":"ok","timestamp":1653757423631,"user_tz":-480,"elapsed":459,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a1a7e2f6-983b-4f0b-b03e-12d219c3477a"},"execution_count":122,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Estimator value:  1\n","Accuracy:  0.9914640455250905\n","\n"," Estimator value:  2\n","Accuracy:  0.9919813760993275\n","\n"," Estimator value:  3\n","Accuracy:  0.9930160372478013\n","\n"," Estimator value:  10\n","Accuracy:  0.9956026901189861\n"]}]},{"cell_type":"code","source":["leaf_size = [1,2,3,5,10]\n","\n","for i in leaf_size:\n","    model_mhpt_FNL = RandomForestClassifier(n_estimators=100, min_samples_leaf = i)\n","    model_mhpt_FNL.fit(xr_train_xgb, yr_train_xgb) #\n","    y_pred_mhpt_FNL = model_mhpt_FNL.predict(xr_test_xgb) #\n","    result_mhpt_FNL = confusion_matrix(yr_test_xgb, y_pred_mhpt_FNL) #\n","    result2_mhpt_FNL = accuracy_score(yr_test_xgb, y_pred_mhpt_FNL) #\n","    print('\\n Leaf size: ', i)\n","    print('Accuracy: ', result2_mhpt_FNL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NrPr8RBIDiC0","executionInfo":{"status":"ok","timestamp":1653757430924,"user_tz":-480,"elapsed":7296,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"25920458-b4c1-46c5-a9e5-bace1bfa2062"},"execution_count":123,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Leaf size:  1\n","Accuracy:  0.9961200206932229\n","\n"," Leaf size:  2\n","Accuracy:  0.9956026901189861\n","\n"," Leaf size:  3\n","Accuracy:  0.9948266942576306\n","\n"," Leaf size:  5\n","Accuracy:  0.9945680289705121\n","\n"," Leaf size:  10\n","Accuracy:  0.991722710812209\n"]}]},{"cell_type":"code","source":["train_x_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0viCkakLG16_","executionInfo":{"status":"ok","timestamp":1653757430925,"user_tz":-480,"elapsed":28,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"ce070e7d-04a2-4adb-d226-193995cd37c8"},"execution_count":124,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(15891, 7)"]},"metadata":{},"execution_count":124}]},{"cell_type":"code","source":["train_y_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EEPxpAVcG656","executionInfo":{"status":"ok","timestamp":1653757430925,"user_tz":-480,"elapsed":21,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"90a71b12-425a-4b12-fab0-ad8cc817f8d2"},"execution_count":125,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(15891,)"]},"metadata":{},"execution_count":125}]},{"cell_type":"code","source":["test_x_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9ZeuGpueG9HK","executionInfo":{"status":"ok","timestamp":1653757430926,"user_tz":-480,"elapsed":16,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"1d6e05a0-3703-4e29-ca92-af4e4e66f3c9"},"execution_count":126,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3973, 7)"]},"metadata":{},"execution_count":126}]},{"cell_type":"code","source":["test_y_upsampled.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cq09W4IxG_z-","executionInfo":{"status":"ok","timestamp":1653757430926,"user_tz":-480,"elapsed":11,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"c97c7ec7-acf6-4dde-fa5a-b701a306045a"},"execution_count":127,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3973,)"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["df_train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0XXRqC2HMb83","executionInfo":{"status":"ok","timestamp":1653757431574,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0e751aeb-640c-4961-e7c6-4a095f51b67a"},"execution_count":128,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      step     amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n","3604     2   30709.74           0.00            0.00            0.00   \n","1357     1    4074.17         574.00            0.00            0.00   \n","5260     5    1948.60         441.00            0.00            0.00   \n","7829     7    3751.13      983668.00       979916.87            0.00   \n","9853     7  120142.49       42244.79            0.00       139480.44   \n","\n","      newbalanceDest  isFraud  \n","3604            0.00        0  \n","1357            0.00        0  \n","5260            0.00        0  \n","7829            0.00        0  \n","9853       259622.93        0  "],"text/html":["\n","  <div id=\"df-0dd49399-02a9-4c49-9650-f316cd1e7dbc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>step</th>\n","      <th>amount</th>\n","      <th>oldbalanceOrg</th>\n","      <th>newbalanceOrig</th>\n","      <th>oldbalanceDest</th>\n","      <th>newbalanceDest</th>\n","      <th>isFraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3604</th>\n","      <td>2</td>\n","      <td>30709.74</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1357</th>\n","      <td>1</td>\n","      <td>4074.17</td>\n","      <td>574.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5260</th>\n","      <td>5</td>\n","      <td>1948.60</td>\n","      <td>441.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7829</th>\n","      <td>7</td>\n","      <td>3751.13</td>\n","      <td>983668.00</td>\n","      <td>979916.87</td>\n","      <td>0.00</td>\n","      <td>0.00</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9853</th>\n","      <td>7</td>\n","      <td>120142.49</td>\n","      <td>42244.79</td>\n","      <td>0.00</td>\n","      <td>139480.44</td>\n","      <td>259622.93</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0dd49399-02a9-4c49-9650-f316cd1e7dbc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0dd49399-02a9-4c49-9650-f316cd1e7dbc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0dd49399-02a9-4c49-9650-f316cd1e7dbc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":128}]},{"cell_type":"code","source":["############################################# 7.2 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - SMOTEENN Data - RF Classifier"],"metadata":{"id":"qBoYfkvh6EbB","executionInfo":{"status":"ok","timestamp":1653757431576,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":129,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","n_estimators_rs"],"metadata":{"id":"mPo-fj-HDith","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757431579,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b24d6184-5fd9-4670-c674-f6a196697945"},"execution_count":130,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]"]},"metadata":{},"execution_count":130}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators_rs = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators_rs,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","print(random_grid)"],"metadata":{"id":"Uh8NO1BYDiwY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757431580,"user_tz":-480,"elapsed":27,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b15dc8eb-64de-4edd-a0b3-7ceddfc2cfab"},"execution_count":131,"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000], 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4], 'bootstrap': [True, False]}\n"]}]},{"cell_type":"code","source":["\"\"\"\n","5 mins\n","\"\"\"\n","# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestClassifier()\n","# Random search of parameters, using 3 fold cross validation, \n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 10, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(xr_train_xgb, yr_train_xgb) ##"],"metadata":{"id":"E6B4pMcjDizB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757748908,"user_tz":-480,"elapsed":317350,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"00c4bb84-2f2f-43e6-8de1-78440a25dced"},"execution_count":132,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestClassifier(), n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"]},"metadata":{},"execution_count":132}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    accuracy = accuracy_score(test_labels,predictions)\n","    print('Model Performance')\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    return accuracy"],"metadata":{"id":"ONLSsQbhDi1s","executionInfo":{"status":"ok","timestamp":1653757748910,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":133,"outputs":[]},{"cell_type":"code","source":["base_model = RandomForestClassifier(n_estimators = 10, random_state = 42)\n","base_model.fit(xr_train_xgb, yr_train_xgb)\n","base_accuracy = evaluate(base_model, xr_test_xgb, yr_test_xgb)"],"metadata":{"id":"DhQN5q7xD80O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757748911,"user_tz":-480,"elapsed":36,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a152fab2-2916-40f8-ed60-589ec700ec3e"},"execution_count":134,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["best_random = rf_random.best_estimator_\n","print(best_random)\n","random_accuracy = evaluate(best_random, xr_test_xgb, yr_test_xgb)"],"metadata":{"id":"cgWMLzZcD83Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757750113,"user_tz":-480,"elapsed":1232,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"4cf42d2e-9a79-46e1-edf5-177e1f45874c"},"execution_count":135,"outputs":[{"output_type":"stream","name":"stdout","text":["RandomForestClassifier(bootstrap=False, max_depth=70, min_samples_split=5,\n","                       n_estimators=1800)\n","Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["best_random"],"metadata":{"id":"C52xZKTGD86A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757750114,"user_tz":-480,"elapsed":28,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"da65505c-0b42-4e78-bbd6-c7a06e46a7d6"},"execution_count":136,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=False, max_depth=70, min_samples_split=5,\n","                       n_estimators=1800)"]},"metadata":{},"execution_count":136}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (random_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"id":"YMtHnIGpDi4C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653757750115,"user_tz":-480,"elapsed":23,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b250b2a6-25d7-49c3-e09b-a526e56dd4f0"},"execution_count":137,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.03%.\n"]}]},{"cell_type":"code","source":["############################################# 7.3 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - SMOTEENN Data - RF Classifier"],"metadata":{"id":"I99Zb0BJ6Eds","executionInfo":{"status":"ok","timestamp":1653757750115,"user_tz":-480,"elapsed":14,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":138,"outputs":[]},{"cell_type":"code","source":["param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}"],"metadata":{"id":"_j34uqvbDjpM","executionInfo":{"status":"ok","timestamp":1653757750115,"user_tz":-480,"elapsed":13,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":139,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","# Create the parameter grid based on the results of random search \n","param_grid = {\n","    'bootstrap': [True],\n","    'max_depth': [80, 90, 100, 110],\n","    'max_features': [2, 3],\n","    'min_samples_leaf': [3, 4, 5],\n","    'min_samples_split': [8, 10, 12],\n","    'n_estimators': [100, 200, 300, 1000]\n","}\n","# Create a based model\n","rf_gd = RandomForestClassifier()\n","# Instantiate the grid search model\n","grid_search = GridSearchCV(estimator = rf_gd, param_grid = param_grid, \n","                          cv = 2, n_jobs = -1, verbose = 2)"],"metadata":{"id":"zSwJ-C2fDjsE","executionInfo":{"status":"ok","timestamp":1653757750116,"user_tz":-480,"elapsed":14,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":140,"outputs":[]},{"cell_type":"code","source":["\"\"\"\n","26 mins\n","\"\"\"\n","# Fit the grid search to the data\n","grid_search.fit(xr_train_xgb, yr_train_xgb) #\n","grid_search.best_params_"],"metadata":{"id":"RfS0Uzh5Djuk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759275973,"user_tz":-480,"elapsed":1525870,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"0eb99f26-c06d-4e2f-d1c2-123f97bc9ee4"},"execution_count":141,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 2 folds for each of 288 candidates, totalling 576 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["{'bootstrap': True,\n"," 'max_depth': 80,\n"," 'max_features': 3,\n"," 'min_samples_leaf': 3,\n"," 'min_samples_split': 8,\n"," 'n_estimators': 100}"]},"metadata":{},"execution_count":141}]},{"cell_type":"code","source":["best_grid = grid_search.best_estimator_\n","grid_accuracy = evaluate(best_grid, xr_train_xgb, yr_train_xgb)"],"metadata":{"id":"sNhnnSOuDjxU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759275977,"user_tz":-480,"elapsed":111,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"3def5432-5f43-47f4-90e7-180888a8b9fa"},"execution_count":142,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Accuracy = 1.00%.\n"]}]},{"cell_type":"code","source":["print('Improvement of {:0.2f}%.'.format( 100 * (grid_accuracy - base_accuracy) / base_accuracy))"],"metadata":{"id":"3hTQswxrDjzz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759275979,"user_tz":-480,"elapsed":92,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"f8594264-e9a5-4c0c-e695-ab236e83402a"},"execution_count":143,"outputs":[{"output_type":"stream","name":"stdout","text":["Improvement of 0.30%.\n"]}]},{"cell_type":"code","source":["best_grid"],"metadata":{"id":"4BpyDGFzEJLk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759275982,"user_tz":-480,"elapsed":81,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"d1d7200c-cfa4-4c5e-8199-41eb76a4495a"},"execution_count":144,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=80, max_features=3, min_samples_leaf=3,\n","                       min_samples_split=8)"]},"metadata":{},"execution_count":144}]},{"cell_type":"code","source":["############################################# 7.4 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - SMOTEENN Data - XGBoost Classifier"],"metadata":{"id":"RHJ2O3Uo6EhE","executionInfo":{"status":"ok","timestamp":1653759275985,"user_tz":-480,"elapsed":75,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":145,"outputs":[]},{"cell_type":"code","source":["## Hyper Parameter Optimization\n","\n","params={\n"," \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n"," \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n"," \"min_child_weight\" : [ 1, 3, 5, 7 ],\n"," \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n"," \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n","    \n","}"],"metadata":{"id":"0ynatTtUDknl","executionInfo":{"status":"ok","timestamp":1653759275987,"user_tz":-480,"elapsed":73,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":146,"outputs":[]},{"cell_type":"code","source":["## Hyperparameter optimization using RandomizedSearchCV\n","from sklearn.model_selection import RandomizedSearchCV"],"metadata":{"id":"dqvqfrw8DkqZ","executionInfo":{"status":"ok","timestamp":1653759275989,"user_tz":-480,"elapsed":74,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":147,"outputs":[]},{"cell_type":"code","source":["def timer(start_time=None):\n","    if not start_time:\n","        start_time = datetime.now()\n","        return start_time\n","    elif start_time:\n","        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n","        tmin, tsec = divmod(temp_sec, 60)\n","        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))"],"metadata":{"id":"N6wO6K0BDktV","executionInfo":{"status":"ok","timestamp":1653759275992,"user_tz":-480,"elapsed":74,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":148,"outputs":[]},{"cell_type":"code","source":["classifier_new=xgboost.XGBClassifier()"],"metadata":{"id":"R4Z7tc3yDkv3","executionInfo":{"status":"ok","timestamp":1653759275997,"user_tz":-480,"elapsed":77,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":149,"outputs":[]},{"cell_type":"code","source":["random_search=RandomizedSearchCV(classifier_new,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=3,verbose=3)"],"metadata":{"id":"tJtVrmOIDkyP","executionInfo":{"status":"ok","timestamp":1653759276390,"user_tz":-480,"elapsed":468,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":150,"outputs":[]},{"cell_type":"code","source":["from datetime import datetime\n","# Here we go\n","start_time = timer(None) # timing starts from this point for \"start_time\" variable\n","random_search.fit(xr_train_xgb, yr_train_xgb) #\n","timer(start_time) # timing ends here for \"start_time\" variable"],"metadata":{"id":"aGYGZcHc6Ekq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759284310,"user_tz":-480,"elapsed":7935,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"8da16fbe-215b-4fce-e34e-215054363b17"},"execution_count":151,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 5 candidates, totalling 15 fits\n","\n"," Time taken: 0 hours 0 minutes and 8.38 seconds.\n"]}]},{"cell_type":"code","source":["random_search.best_estimator_"],"metadata":{"id":"E4N5jhk0ER_2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759284313,"user_tz":-480,"elapsed":37,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"224edebe-901c-4992-8259-2f75390a1498"},"execution_count":152,"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(colsample_bytree=0.7, gamma=0.0, learning_rate=0.2, max_depth=15,\n","              min_child_weight=5)"]},"metadata":{},"execution_count":152}]},{"cell_type":"code","source":["random_search.best_params_"],"metadata":{"id":"t0rfG1afESG0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759284864,"user_tz":-480,"elapsed":570,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"a0820c21-ab6d-4973-e542-d1f0f94f79c5"},"execution_count":153,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'colsample_bytree': 0.7,\n"," 'gamma': 0.0,\n"," 'learning_rate': 0.2,\n"," 'max_depth': 15,\n"," 'min_child_weight': 5}"]},"metadata":{},"execution_count":153}]},{"cell_type":"code","source":["############################################# 7.5 ###################################################\n","\n","# Hyper Parameter Optimization - Manual HPT --> 5.3 ReSampling Data"],"metadata":{"id":"z5lyTRAwJeHk","executionInfo":{"status":"ok","timestamp":1653759284866,"user_tz":-480,"elapsed":51,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":154,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","\n","#leaf_size = [2,3,5,10]\n","n_estimators_list = [1,2,3,10]\n","\n","for estim_list in n_estimators_list:\n","    model_mhpt_RSD = RandomForestClassifier(n_estimators=estim_list)\n","    model_mhpt_RSD.fit(train_x_upsampled, train_y_upsampled) #\n","    y_pred_mhpt_RSD = model_mhpt_RSD.predict(test_x_upsampled) #\n","    result_mhpt_RSD = confusion_matrix(test_y_upsampled, y_pred_mhpt_RSD) #\n","    result2_mhpt_RSD = accuracy_score(test_y_upsampled, y_pred_mhpt_RSD) #\n","    print('\\n Estimator value: ', estim_list)\n","    print('Accuracy: ', result2_mhpt_RSD)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RF5O2xEHKHIL","executionInfo":{"status":"ok","timestamp":1653759284872,"user_tz":-480,"elapsed":55,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"b477e452-3091-48d2-9bae-e49799a4cd40"},"execution_count":155,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Estimator value:  1\n","Accuracy:  0.9974830103196577\n","\n"," Estimator value:  2\n","Accuracy:  0.9987415051598288\n","\n"," Estimator value:  3\n","Accuracy:  0.9994966020639315\n","\n"," Estimator value:  10\n","Accuracy:  0.9989932041278631\n"]}]},{"cell_type":"code","source":["\"\"\"\n","ValueError                                Traceback (most recent call last)\n","----> 6     y_pred_mhpt_RSD = model_mhpt.predict(test_x_upsampled) #\n","ValueError: X has 7 features, but RandomForestClassifier is expecting 6 features as input.\n","\"\"\"\n","\n","leaf_size = [1,2,3,5,10]\n","\n","for i in leaf_size:\n","    model_mhpt_RSD = RandomForestClassifier(n_estimators=100, min_samples_leaf = i)\n","    model_mhpt_RSD.fit(train_x_upsampled, train_y_upsampled) #\n","    y_pred_mhpt_RSD = model_mhpt.predict(test_x_upsampled) #\n","    result_mhpt_RSD = confusion_matrix(test_y_upsampled, y_pred_mhpt_RSD) #\n","    result2_mhpt_RSD = accuracy_score(test_y_upsampled, y_pred_mhpt_RSD) #\n","    print('\\n Leaf size: ', i)\n","    print('Accuracy: ', result2_mhpt_RSD)"],"metadata":{"id":"pmQLph0SXenR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############################################# 7.6 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search - 5.3 ReSampling Data"],"metadata":{"id":"Xdj049xVJeLr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############################################# 7.7 ###################################################\n","\n","# Hyper Parameter Optimization - Grid Search - 5.3 ReSampling Data"],"metadata":{"id":"IhtW69N9JeQy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############################################# 7.8 ###################################################\n","\n","# Hyper Parameter Optimization - Randomized Search + XGBoost - 5.3 ReSampling Data"],"metadata":{"id":"8FWEcIKrJeUT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############################################# 8.1 ###################################################\n","\n","# Applying HPO to XGBoost on SMOTENN Data"],"metadata":{"id":"oQLXeUgq4Kt4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["classifier_SM_HPO_FINAL=xgboost.XGBClassifier(colsample_bytree=0.7, gamma=0.0, learning_rate=0.2, max_depth=15, min_child_weight=5) \n","# insert best params here"],"metadata":{"id":"qrINzIU-4LW0","executionInfo":{"status":"ok","timestamp":1653759923719,"user_tz":-480,"elapsed":271,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":192,"outputs":[]},{"cell_type":"code","source":["classifier_SM_HPO_FINAL = classifier_SM_HPO_FINAL.fit(xr_train_xgb,yr_train_xgb)\n","\n","#At last we need to make prediction. It can be done with the help of following script −\n","y_pred_SM_HPO_FINAL = classifier_SM_HPO_FINAL.predict(xr_test_xgb)"],"metadata":{"id":"DIANZlHU4Sn0","executionInfo":{"status":"ok","timestamp":1653759927321,"user_tz":-480,"elapsed":1944,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":193,"outputs":[]},{"cell_type":"code","source":["#Next, we can get the accuracy score, confusion matrix and classification report as follows −\n","result_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print(\"Confusion Matrix:\")\n","print(result_SM_HPO_FINAL)\n","result1_SM_HPO_FINAL = classification_report(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print(\"Classification Report:\",)\n","print (result1_SM_HPO_FINAL)\n","result2_SM_HPO_FINAL = accuracy_score(yr_test_xgb,y_pred_SM_HPO_FINAL)\n","print(\"Accuracy:\",result2_SM_HPO_FINAL)"],"metadata":{"id":"C6xzE5Nw4Sqy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759932340,"user_tz":-480,"elapsed":288,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"5acede85-5714-4595-d452-32cce0d75499"},"execution_count":194,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n","[[1894   15]\n"," [   0 1957]]\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      1.00      1909\n","           1       0.99      1.00      1.00      1957\n","\n","    accuracy                           1.00      3866\n","   macro avg       1.00      1.00      1.00      3866\n","weighted avg       1.00      1.00      1.00      3866\n","\n","Accuracy: 0.9961200206932229\n"]}]},{"cell_type":"code","source":["result3_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_SM_HPO_FINAL)\n","print('Confusion Matrix')\n","print(result3_SM_HPO_FINAL)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ke9FYLjM64P1","executionInfo":{"status":"ok","timestamp":1653759935311,"user_tz":-480,"elapsed":283,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"e55d3011-293a-46f8-f7d1-13b1c2aee5ea"},"execution_count":195,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1894   15]\n"," [   0 1957]]\n"]}]},{"cell_type":"code","source":["############################################# 8.2 ###################################################\n","\n","# Applying HPO to Random Forest"],"metadata":{"id":"-TLcNS6k0f4F","executionInfo":{"status":"ok","timestamp":1653759772558,"user_tz":-480,"elapsed":299,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":182,"outputs":[]},{"cell_type":"code","source":["# Fitting RFClassifier to the Training set\n","from sklearn.ensemble import RandomForestClassifier\n","classifier_2_SM_HPO_FINAL = RandomForestClassifier(bootstrap=True,max_depth=80, max_features=3, min_samples_leaf=3, min_samples_split=8, n_estimators=100) \n","# insert HPO here\n","classifier_2_SM_HPO_FINAL.fit(xr_train_xgb, yr_train_xgb)"],"metadata":{"id":"T379zcYf0wD2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759776963,"user_tz":-480,"elapsed":3406,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"da363d85-f47f-4a77-aba0-19852eb33f6f"},"execution_count":183,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=80, max_features=3, min_samples_leaf=3,\n","                       min_samples_split=8)"]},"metadata":{},"execution_count":183}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred_2_SM_HPO_FINAL = classifier_2_SM_HPO_FINAL.predict(xr_test_xgb)"],"metadata":{"id":"cxvA7K1n0wHH","executionInfo":{"status":"ok","timestamp":1653759781211,"user_tz":-480,"elapsed":265,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}}},"execution_count":184,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix, classification_report, accuracy_score\n","result_2_SM_HPO_FINAL = confusion_matrix(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Confusion Matrix')\n","print(result_2_SM_HPO_FINAL)"],"metadata":{"id":"CLbviAuJ0wJ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759782929,"user_tz":-480,"elapsed":463,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"ee23e634-2daa-4224-e40f-eb068267a158"},"execution_count":185,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion Matrix\n","[[1891   18]\n"," [   2 1955]]\n"]}]},{"cell_type":"code","source":["result1_2_SM_HPO_FINAL = classification_report(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Classification Report')\n","print(result1_2_SM_HPO_FINAL)"],"metadata":{"id":"7BcIO2ln0wM4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759785447,"user_tz":-480,"elapsed":297,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"01afb501-0238-4dcb-ebfe-2e0b157ac173"},"execution_count":186,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report\n","              precision    recall  f1-score   support\n","\n","           0       1.00      0.99      0.99      1909\n","           1       0.99      1.00      0.99      1957\n","\n","    accuracy                           0.99      3866\n","   macro avg       0.99      0.99      0.99      3866\n","weighted avg       0.99      0.99      0.99      3866\n","\n"]}]},{"cell_type":"code","source":["result2_2_SM_HPO_FINAL = accuracy_score(yr_test_xgb, y_pred_2_SM_HPO_FINAL)\n","print('Accuracy: ', result2_2_SM_HPO_FINAL)"],"metadata":{"id":"UfsF9ayz0wO7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653759789827,"user_tz":-480,"elapsed":275,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"fbcbf208-498c-4062-910b-876d70fccff7"},"execution_count":187,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy:  0.9948266942576306\n"]}]},{"cell_type":"code","source":["\"\"\"\n","\"\"\"\n","\n","\"\"\"\n","\"\"\"\n","\n","#########################################################################################################################"],"metadata":{"id":"Zjq4VIMn0f-E","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1653759522632,"user_tz":-480,"elapsed":12,"user":{"displayName":"James Cheung","userId":"01825889784814204782"}},"outputId":"df0b41a2-47db-46a7-fbf2-5b704f0fb662"},"execution_count":177,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":177}]}]}